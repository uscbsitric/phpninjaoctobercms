1501891874a:1:{s:24:"laravel5.4/socialite.htm";a:11:{s:8:"fileName";s:24:"laravel5.4/socialite.htm";s:7:"content";s:10199:"title = "Socialite"
url = "/socialite"
layout = "laravel5-4TutorialsLayout"
description = "Laravel Socialite"
is_hidden = 0

[siteSearchInclude]
==
{% component 'siteSearchInclude' %}

<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> Socialite </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      Provides an expressive, fluent interface to OAuth authentication with Facebook, Twitter, Google, LinkedIn, GitHub and Bitbucket.
      It handles almost all of the boilerplate social authentication code you are dreading writing.
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      I havent performed oauth2 operations with socialite together with social sites but I have noticed that there are <code>tokens</code> being returned
      <p>
        I think for the case of <code>github</code>, this is where the <code>token</code> will be used: <code>https://developer.github.com/v3/</code>
        
        I think for the case of <code>facebook</code>, this is where the <code>token</code> will be used: <code>https://developers.facebook.com/docs/facebook-login/permissions</code>

        For github social login, it will take at least 10 steps instead of 13, for facebook, I did not count, but their steps are similar.
      </p>
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      When you need social authentication and <code>I think</code> when you need need to perform OAuth2 operations with the social sites.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ul>
        <li>
		  Step 1: Added Login Scaffolding with <code>php artisan make:auth</code>
        </li>

        <li>
		  Step 2: Insatalled Socialite by running <code>composer require laravel/socialite</code>
        </li>

        <li>
		  Step 3: Added the <code>Socialite Service Provider</code>
          <pre>
            In <strong>rootProjectDirectory\config\app.php</strong>, in the <strong>providers</strong> array, add the <strong>Socialite Service Provider</strong>.
            <code>
            ...
            /*
             * Other service providers
            */
            'providers' => [...,
                            Laravel\Socialite\SocialiteServiceProvider::class,
                           ],
            ...
            </code>
          </pre>
        </li>

        <li>
		  Step 4: Added an <code>alias</code> for <code>Socialite Facade</code>
          <pre>
            In <strong>rootProjectDirectory\config\app.php</strong>, in the <strong>aliases array</strong>, add the <strong>alias</strong> for the the <strong>Socialite Facade</strong>.
            <code>
            'aliases' => ['...' => '...',
                          'Socialite' => Laravel\Socialite\Facades\Socialite::class,
                         ],
            </code>
          </pre>
        </li>


        <li>
		  Step 5: Added github OAuth Application credentials
          <pre>
            In <strong>rootProjectDirectory\config\services.php</strong>
            <code>
            return = ['' => [...],
                      'github' => ['client_id'     => 'e3062e3e55f399b526f0',
                                   'client_secret' => '2f0d2e43f12fb06e19ffee5a3e610c3ce05a741c',
                                   'redirect'      => 'http://socialitetutorials.local/githubcallback'
                                  ]
                     ];
            </code>
          </pre>
        </li>

        <li>
		  Step 6: Added <code>GithubLoginController</code>
          <pre>
            In <strong>rootProjectDirectory\app\Http\Controllers\GithubLoginController.php</strong>
            <code>
            &lt;?php

            namespace App\Http\Controllers;

            use Illuminate\Http\Request;
            use Socialite;
            use Illuminate\Support\Facades\Auth;
            use App\SocialAccountService;

            class GithubLoginController extends Controller
            {
              function githubRedirect()
              {
                return Socialite::driver('github')->redirect();
              }

              function githubCallback(SocialAccountService $socialAccountService)
              {
                $githubUser = Socialite::driver('github')->user();
                session(['githubUser' => $githubUser]);

                $user = $socialAccountService->createOrGetUser($githubUser);

                Auth::login($user);

                return redirect()->route('home');
              }
            }
            </code>
          </pre>
        </li>

        <li>
		  Step 7: Added SocialAccountService.php to register a user or login if account already exists.
          <pre>
            In <strong>rootProjectDirectory\app\SocialAccountService.php</strong>
            <code>
            &lt;?php

            namespace App;

            use Laravel\Socialite\Contracts\User as ProviderUser;

            class SocialAccountService
            {
              public function createOrGetUser(ProviderUser $providerUser)
              {
                $account = SocialAccount::whereProvider('github')
                                          ->whereProviderUserId( $providerUser->getId())
                                          ->first();

                if($account)
                {
                  return $account->user;
                }
                else
                {
                  $account = new SocialAccount(['provider_user_id' => $providerUser->getId(),
                                                'provider' => 'github'
                                               ]
                                              );

                  $user = User::whereEmail( $providerUser->getEmail() )->first();

                  if(!$user)
                  {
                    $user = User::create(['email' => $providerUser->getEmail(),
                                          'name'  => $providerUser->getName()
                                         ]
                                        );
                  }

                  $account->user()->associate($user);
                  $account->save();

                  return $user;
                }

              }
            }
            </code>
          </pre>
        </li>

        <li>
		  Step 8: Created a migraton to update the users table by having the email field nullable, running <code>php artisan make:migration update_users_table --table=users</code> <code>you may skip this, if you dont want to change the email field to be nullable</code>
          <pre>
          </pre>
        </li>
        
        <li>
		  Step 9: Installed doctrine/dbal to enable column updates with migrations, by running <code>composer require doctrine/dbal</code>  <code>you may skip this, if you dont want to change the email field to be nullable</code>
          <pre>
          </pre>
        </li>

        <li>
		  Step 10: Updated the update_users_table migration and ran it. <code>you may skip this,  if you dont want to change the email field to be nullable</code>
          <pre>
          </pre>
        </li>

        <li>
		  Step 11: Added SocialAccount Model.
          <pre>
            In <strong>rootProjectDirectory\app\SocialAccount.php</strong>
            <code>
            &lt;?php

              namespace App;

              use Illuminate\Database\Eloquent\Model;

              class SocialAccount extends Model
              {
                protected $fillable = ['user_id', 'provider_user_id', 'provider'];

                public function user()
                {
                  return $this->belongsTo(User::class);
                }
              }
            </code>
          </pre>
        </li>

        <li>
		  Step 12: Added <code>routes</code> for github social authentication.
          <pre>
            In <strong>rootProjectDirectory\routes\web.php</strong>
            <code>
              ...
              Route::get('/githubredirect', 'GithubLoginController@githubRedirect')->name('githubredirect');
              Route::get('/githubcallback', 'GithubLoginController@githubCallback')->name('githubcallback');
            </code>
          </pre>
        </li>

        <li>
		  Step 13: Added the stored github user to the HomeController and passed to home.blade.php
          <pre>
            <code>
            In <strong>rootProjectDirectory\app\Http\Controllers\HomeController.php</strong>
            ...
            public function index()
            {
              $githubUser = session("githubUser");
              return view('home')->with(["githubUser" => $githubUser]);
            }
            
            In <strong>rootProjectDirectory\resources\views\home.blade.php</strong>
            ...
            @isset( $githubUser )
              { { dd( $githubUser ) } }
            @endisset
            </code>
          </pre>
        </li>

      </ul>
    </p>
  </div>
</div>            <!-- How To Do It -->";s:5:"mtime";i:1501363273;s:6:"markup";s:10051:"{% component 'siteSearchInclude' %}

<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> Socialite </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      Provides an expressive, fluent interface to OAuth authentication with Facebook, Twitter, Google, LinkedIn, GitHub and Bitbucket.
      It handles almost all of the boilerplate social authentication code you are dreading writing.
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      I havent performed oauth2 operations with socialite together with social sites but I have noticed that there are <code>tokens</code> being returned
      <p>
        I think for the case of <code>github</code>, this is where the <code>token</code> will be used: <code>https://developer.github.com/v3/</code>
        
        I think for the case of <code>facebook</code>, this is where the <code>token</code> will be used: <code>https://developers.facebook.com/docs/facebook-login/permissions</code>

        For github social login, it will take at least 10 steps instead of 13, for facebook, I did not count, but their steps are similar.
      </p>
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      When you need social authentication and <code>I think</code> when you need need to perform OAuth2 operations with the social sites.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ul>
        <li>
		  Step 1: Added Login Scaffolding with <code>php artisan make:auth</code>
        </li>

        <li>
		  Step 2: Insatalled Socialite by running <code>composer require laravel/socialite</code>
        </li>

        <li>
		  Step 3: Added the <code>Socialite Service Provider</code>
          <pre>
            In <strong>rootProjectDirectory\config\app.php</strong>, in the <strong>providers</strong> array, add the <strong>Socialite Service Provider</strong>.
            <code>
            ...
            /*
             * Other service providers
            */
            'providers' => [...,
                            Laravel\Socialite\SocialiteServiceProvider::class,
                           ],
            ...
            </code>
          </pre>
        </li>

        <li>
		  Step 4: Added an <code>alias</code> for <code>Socialite Facade</code>
          <pre>
            In <strong>rootProjectDirectory\config\app.php</strong>, in the <strong>aliases array</strong>, add the <strong>alias</strong> for the the <strong>Socialite Facade</strong>.
            <code>
            'aliases' => ['...' => '...',
                          'Socialite' => Laravel\Socialite\Facades\Socialite::class,
                         ],
            </code>
          </pre>
        </li>


        <li>
		  Step 5: Added github OAuth Application credentials
          <pre>
            In <strong>rootProjectDirectory\config\services.php</strong>
            <code>
            return = ['' => [...],
                      'github' => ['client_id'     => 'e3062e3e55f399b526f0',
                                   'client_secret' => '2f0d2e43f12fb06e19ffee5a3e610c3ce05a741c',
                                   'redirect'      => 'http://socialitetutorials.local/githubcallback'
                                  ]
                     ];
            </code>
          </pre>
        </li>

        <li>
		  Step 6: Added <code>GithubLoginController</code>
          <pre>
            In <strong>rootProjectDirectory\app\Http\Controllers\GithubLoginController.php</strong>
            <code>
            &lt;?php

            namespace App\Http\Controllers;

            use Illuminate\Http\Request;
            use Socialite;
            use Illuminate\Support\Facades\Auth;
            use App\SocialAccountService;

            class GithubLoginController extends Controller
            {
              function githubRedirect()
              {
                return Socialite::driver('github')->redirect();
              }

              function githubCallback(SocialAccountService $socialAccountService)
              {
                $githubUser = Socialite::driver('github')->user();
                session(['githubUser' => $githubUser]);

                $user = $socialAccountService->createOrGetUser($githubUser);

                Auth::login($user);

                return redirect()->route('home');
              }
            }
            </code>
          </pre>
        </li>

        <li>
		  Step 7: Added SocialAccountService.php to register a user or login if account already exists.
          <pre>
            In <strong>rootProjectDirectory\app\SocialAccountService.php</strong>
            <code>
            &lt;?php

            namespace App;

            use Laravel\Socialite\Contracts\User as ProviderUser;

            class SocialAccountService
            {
              public function createOrGetUser(ProviderUser $providerUser)
              {
                $account = SocialAccount::whereProvider('github')
                                          ->whereProviderUserId( $providerUser->getId())
                                          ->first();

                if($account)
                {
                  return $account->user;
                }
                else
                {
                  $account = new SocialAccount(['provider_user_id' => $providerUser->getId(),
                                                'provider' => 'github'
                                               ]
                                              );

                  $user = User::whereEmail( $providerUser->getEmail() )->first();

                  if(!$user)
                  {
                    $user = User::create(['email' => $providerUser->getEmail(),
                                          'name'  => $providerUser->getName()
                                         ]
                                        );
                  }

                  $account->user()->associate($user);
                  $account->save();

                  return $user;
                }

              }
            }
            </code>
          </pre>
        </li>

        <li>
		  Step 8: Created a migraton to update the users table by having the email field nullable, running <code>php artisan make:migration update_users_table --table=users</code> <code>you may skip this, if you dont want to change the email field to be nullable</code>
          <pre>
          </pre>
        </li>
        
        <li>
		  Step 9: Installed doctrine/dbal to enable column updates with migrations, by running <code>composer require doctrine/dbal</code>  <code>you may skip this, if you dont want to change the email field to be nullable</code>
          <pre>
          </pre>
        </li>

        <li>
		  Step 10: Updated the update_users_table migration and ran it. <code>you may skip this,  if you dont want to change the email field to be nullable</code>
          <pre>
          </pre>
        </li>

        <li>
		  Step 11: Added SocialAccount Model.
          <pre>
            In <strong>rootProjectDirectory\app\SocialAccount.php</strong>
            <code>
            &lt;?php

              namespace App;

              use Illuminate\Database\Eloquent\Model;

              class SocialAccount extends Model
              {
                protected $fillable = ['user_id', 'provider_user_id', 'provider'];

                public function user()
                {
                  return $this->belongsTo(User::class);
                }
              }
            </code>
          </pre>
        </li>

        <li>
		  Step 12: Added <code>routes</code> for github social authentication.
          <pre>
            In <strong>rootProjectDirectory\routes\web.php</strong>
            <code>
              ...
              Route::get('/githubredirect', 'GithubLoginController@githubRedirect')->name('githubredirect');
              Route::get('/githubcallback', 'GithubLoginController@githubCallback')->name('githubcallback');
            </code>
          </pre>
        </li>

        <li>
		  Step 13: Added the stored github user to the HomeController and passed to home.blade.php
          <pre>
            <code>
            In <strong>rootProjectDirectory\app\Http\Controllers\HomeController.php</strong>
            ...
            public function index()
            {
              $githubUser = session("githubUser");
              return view('home')->with(["githubUser" => $githubUser]);
            }
            
            In <strong>rootProjectDirectory\resources\views\home.blade.php</strong>
            ...
            @isset( $githubUser )
              { { dd( $githubUser ) } }
            @endisset
            </code>
          </pre>
        </li>

      </ul>
    </p>
  </div>
</div>            <!-- How To Do It -->";s:4:"code";N;s:5:"title";s:9:"Socialite";s:3:"url";s:10:"/socialite";s:6:"layout";s:25:"laravel5-4TutorialsLayout";s:11:"description";s:17:"Laravel Socialite";s:9:"is_hidden";s:1:"0";s:17:"siteSearchInclude";a:0:{}}}