1488082979a:1:{s:32:"laravel5.2/repositoryPattern.htm";a:10:{s:8:"fileName";s:32:"laravel5.2/repositoryPattern.htm";s:7:"content";s:5104:"title = "Repository Pattern"
url = "/repository-pattern"
layout = "laravel5-2TutorialsLayout"
description = "Repository Pattern"
is_hidden = 0
==
<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Design Pattern</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-lightbulb icon-2x"></span> Repository Pattern </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      Holds all of our data access logic.  Especially usefull if the application grows and you need to share some Eloquent queries accross the application.
      Taken from <code>bosnadev.com/2015/03/07/using-repository-pattern-in-laravel-5/</code>.  Repository pattern separates the data access logic and maps
      it to the business entities in the business logic.  Communication between the data access logicand the business logic is done through interfaces.
      
      To put it simply, Repository Pattern is a kind of container where data access logic is stored.  It hides the details of data access logic from business logic.
      We allow business logic to access the data object without having knowledge of underlying data access architecture.
      
      The separation of data access from bussiness logic have many benefits.
      
      <ul class="fontColorWhite1">
        <li>
          Centralization of the data access logic makes code easier to maintain
        </li>
        <li>
          Business and data access logic can be tested separately
        </li>
        <li>
          Reduces Duplication of Code
        </li>
        <li>
          A lower chance of making programming error
        </li>
      </ul>
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      None
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      When we need to separate data access logic from business logic.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ol>
        <li>
          Make a folder <code>Repositories</code> under <code>RootProjectDirectory/app/Http</code>
        </li>

        <li>
          Make a file <code>TaskRepository.php</code>
          
          <pre>
            <code>
              &lt;?php
              namespace App\Repositories;
              use App\User;

              class TaskRepository
              {
                // An example of a simple data access logic: "use Eloquent ORM Relationships to retrieve all tasks owned by this user"
                public function forUser()
                {
                    return $user->tasks()
                                ->orderBy('created_at', 'asc')
                                ->get();
                }
              }
              ?&gt;
            </code>
          </pre>
        </li>

        <li>
          Inject the Repository in the Controller, example in <code>RootProjectDirectory/app/Http/Controller/TasksController.php</code>
          <pre>
            <code>
              &lt;php

              namespace App\Http\Controllers;

              use App\Http\Requests;
              use Illuminate\Http\Request;
              use App\Http\Requests\TaskRequest;
              use App\Http\Controllers\Controller;
              use App\Repositories\TaskRepository;
              use App\Task;

              class TasksController extends Controller
              {
	            protected $tasksRepository;
	            
                public function __construct(TaskRepository $tasks)
                {
                  $this->tasksRepository = $tasksRepository;
                }

              ?&gt;
            </code>
          </pre>
        </li>

        <li>
		  In the same Controller (TasksController)
		  
		  <pre>
		    <code>
		      ...
		      public function index(Request $request)
		      {
		                 // an example of a simple bussiness logic: "Get me all tasks for this user"
		        $tasks = $this->tasksRepository->forUser($request->user());
		        
		        return view('tasks.index', compact('tasks'));
		      }
		    </code>
		  </pre>
        </li>
      </ol>
    </p>
  </div>
</div>            <!-- How To Do It -->";s:5:"mtime";i:1486540219;s:6:"markup";s:4958:"<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Design Pattern</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-lightbulb icon-2x"></span> Repository Pattern </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      Holds all of our data access logic.  Especially usefull if the application grows and you need to share some Eloquent queries accross the application.
      Taken from <code>bosnadev.com/2015/03/07/using-repository-pattern-in-laravel-5/</code>.  Repository pattern separates the data access logic and maps
      it to the business entities in the business logic.  Communication between the data access logicand the business logic is done through interfaces.
      
      To put it simply, Repository Pattern is a kind of container where data access logic is stored.  It hides the details of data access logic from business logic.
      We allow business logic to access the data object without having knowledge of underlying data access architecture.
      
      The separation of data access from bussiness logic have many benefits.
      
      <ul class="fontColorWhite1">
        <li>
          Centralization of the data access logic makes code easier to maintain
        </li>
        <li>
          Business and data access logic can be tested separately
        </li>
        <li>
          Reduces Duplication of Code
        </li>
        <li>
          A lower chance of making programming error
        </li>
      </ul>
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      None
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      When we need to separate data access logic from business logic.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ol>
        <li>
          Make a folder <code>Repositories</code> under <code>RootProjectDirectory/app/Http</code>
        </li>

        <li>
          Make a file <code>TaskRepository.php</code>
          
          <pre>
            <code>
              &lt;?php
              namespace App\Repositories;
              use App\User;

              class TaskRepository
              {
                // An example of a simple data access logic: "use Eloquent ORM Relationships to retrieve all tasks owned by this user"
                public function forUser()
                {
                    return $user->tasks()
                                ->orderBy('created_at', 'asc')
                                ->get();
                }
              }
              ?&gt;
            </code>
          </pre>
        </li>

        <li>
          Inject the Repository in the Controller, example in <code>RootProjectDirectory/app/Http/Controller/TasksController.php</code>
          <pre>
            <code>
              &lt;php

              namespace App\Http\Controllers;

              use App\Http\Requests;
              use Illuminate\Http\Request;
              use App\Http\Requests\TaskRequest;
              use App\Http\Controllers\Controller;
              use App\Repositories\TaskRepository;
              use App\Task;

              class TasksController extends Controller
              {
	            protected $tasksRepository;
	            
                public function __construct(TaskRepository $tasks)
                {
                  $this->tasksRepository = $tasksRepository;
                }

              ?&gt;
            </code>
          </pre>
        </li>

        <li>
		  In the same Controller (TasksController)
		  
		  <pre>
		    <code>
		      ...
		      public function index(Request $request)
		      {
		                 // an example of a simple bussiness logic: "Get me all tasks for this user"
		        $tasks = $this->tasksRepository->forUser($request->user());
		        
		        return view('tasks.index', compact('tasks'));
		      }
		    </code>
		  </pre>
        </li>
      </ol>
    </p>
  </div>
</div>            <!-- How To Do It -->";s:4:"code";N;s:5:"title";s:18:"Repository Pattern";s:3:"url";s:19:"/repository-pattern";s:6:"layout";s:25:"laravel5-2TutorialsLayout";s:11:"description";s:18:"Repository Pattern";s:9:"is_hidden";s:1:"0";}}