1490151654a:1:{s:18:"laravel5.2/jwt.htm";a:9:{s:8:"fileName";s:18:"laravel5.2/jwt.htm";s:7:"content";s:19800:"title = "JWT Authentication"
url = "/jwt-authentication"
layout = "laravel5-2TutorialsLayout"
is_hidden = 0
==
<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> JWT(Jason Web Token) based Authentication in Laravel 5.2 </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      A token based authentication using Jason Web Token.  Each subsequent request will require a token for it to be honored in the backend.  
      This is for routes, services and resources that requires permit by way of a particular token.
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      The name of my project is startingpoint
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      When you need a token based API with added security.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- What is JSON Web Token -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Is JSON Web Token</h1>
    <p class="fontColorWhite2 noMargin">
      JSON Web Token (JWT) is an open source standard(RFC 7519), that defines a compact and self-contained way for securely transmitting information between parties as a JSON object.
      This information can be verified and trusted because it is digitally signed by the server.  More info at https://jwt.io/introduction/
    </p>
  </div>
</div>            <!-- What is JSON Web Token -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ol>
        <li>
          Create Routes:
          
          <pre>
            in RootProjectDirectory\app\Http\routes.php
            <code>
            &lt;php

            use App\Task;
            use Illuminate\Http\Request;

            // API Token Test
            Route::group(['as' => 'apitokentestgroup::',
                          'middleware' => ['api', 'cors'],
                          'prefix' => 'api',
                         ],
                         function()
                         &#123;
                           Route::post('register', 'ApitokentestController@register');
                           Route::post('login', 'ApitokentestController@login');
                           Route::group(['middleware' => 'jwt-auth'],
                                        function()
                                        &#123;
                                          Route::post('get_user_details', 'ApitokentestController@get_user_details');
                                          Route::resource('apitokentest', 'ApitokentestController');
                                        &#125;
                                       );
                         &#125;
                       );
            </code>
          </pre>
        </li>

        <li>
          Create a Controller:
          
          <pre>
            <code>
              &lt;php

                namespace App\Http\Controllers;

                use Illuminate\Http\Request;
                use App\User;
                use Hash;
                use JWTAuth;
                use App\Role;
                use App\Permission;

                class ApitokentestController extends Controller
                &#123;
	              public function index( Request $request )
	              &#123;
		            $input = $request->all();
		            $user = JWTAuth::toUser($input['token']);
		
		            if($user->can('can-do-everything'))
		            &#123;
			          return response()->json(['result' => 'This is the result from the INDEX function of the ApitokentestController',
                                               'data1' => $input['data1'],
                                               'data2' => $input['data2'],
                                               'data3' => $input['data3'],
                                               'data4' => $input['data4'],
                                              ]);
                    &#125;

                    return response()->json(['result' => 'This is the result from the INDEX function of the ApitokentestController, ACCCESS DENIED',]);
	              &#125;

	              public function store()
	              &#123;
                    return response()->json(['result' => 'This is the result from the STORE function of the ApitokentestController']);
                  &#125;

	              public function create()
                  &#123;
                    return response()->json(['result' => 'This is the result from the CREATE function of the ApitokentestController']);
                  &#125;

                  public function show()
                  &#123;
                    return response()->json(['result' => 'This is the result from the SHOW function of the ApitokentestController']);
                  &#125;

                  public function update()
                  &#123;
                    return response()->json(['result' => 'This is the result from the UPDATE function of the ApitokentestController']);
                  &#125;

                  public function destroy()
                  &#123;
                    return response()->json(['result' => 'This is the result from the DESTROY function of the ApitokentestController']);
                  &#124;

                  public function edit()
                  &#123;
                    return response()->json(['result' => 'This is the result from the EDIT function of the ApitokentestController']);
                  &#125;

                  public function get_user_details()
                  &#123;
                    $input = $request->all();
                    $user = JWTAuth::toUser($input['token']);
                    return response()->json(['result' => $user]);

                    //return response()->json(['result' => 'This is the result from the get_user_details function of the ApitokentestController']);
                  &#125;

                  public function register(Request $request)
                  &#123;
                    $input = $request->all();
                    $input['password'] = Hash::make($input['password']);
                    $input['role'] = 2; // default role code

                    $result = User::create($input);

                    // assign a role and permission set to the newly created user

                    // assign a role and permission set to the newly created user

                    return response()->json(['result'=>true]);
	              &#125;

                  public function login(Request $request)
                  &#123;
                    $input = $request->all();

                    if (!$token = JWTAuth::attempt($input))
                    &#123;
                      return response()->json(['result' => 'wrong email or password.']);
                    &#125;

                    return response()->json(['result' => $token]);
                  &#125;

                &#125;
            </code>
          </pre>
        </li>

        <li>
          JWT Installation <br>

          In the <code>RootProjectDirectory</code>, run <span class="icon-terminal"></span>: <code>composer require tymon/jwt-auth</code>
        </li>

        <li>
		  Add the JWT service provider and alias to app.php, and publish the JWT configuration file.  
		  
		  <pre>
		    In RootProjectDirectory\config\app.php
		    <code>
              //...
              'providers' =&gt; [ //...
                                  /*
                                  * Custom Providers
                                   */
                                  'Tymon\JWTAuth\Providers\JWTAuthServiceProvider', &lt;--- the JWT service provider
                                ];

              //...

              'aliases' =&gt; [ //...
                                'JWTAuth' => 'Tymon\JWTAuth\Facades\JWTAuth', &lt;--- the JWT alias
                              ];
		    </code>

            Then to <strong>publish</strong> the JWT configuration file, in the RootProjectDirectory in the terminal, 
            run <span class="icon-terminal"></span>: <strong>php artisan vendor:publish --provider = "Tymon\JWTAuth\Providers\JWTAuthServiceProvider"</strong>
		  </pre>
        </li>

        <li>
          Generate the JWT Key
          <pre>
            In the terminal while in the project root directory,
            run <span class="icon-terminal"></span>: <strong>php artisan jwt:generate</strong>
            it will update the value of the <strong>secret</strong> index of the jwt.php return array.
          </pre>
        </li>

        <li>
          Create the <code>CORS middleware</code>
		  <pre>
		    <code>
		    This solves the issue of <strong>Cross-Origin Request Blocked: The Same Origin Polciy</strong>

		    in the terminal in the Root Project Directory, run <span class="icon-terminal"></span>: php artisan make:middleware CORS
		    it will generate the file, <strong>RootProjectDirectory/app/Http/Middleware/CORS.php</strong>
		    edit it to have the following code:
		    
            &lt;?php

            namespace App\Http\Middleware;

            use Closure;

            class CORS
            &#123;
              /**
               * Handle an incoming request.
               *
               * @param  \Illuminate\Http\Request  $request
               * @param  \Closure  $next
               * @return mixed
              */
              public function handle($request, Closure $next)
              &#123;
    	        header('Access-Control-Allow-Origin: *');

    	        $headers = ['Access-Control-Allow-Methods'=> 'POST, GET, OPTIONS, PUT, DELETE',
                            'Access-Control-Allow-Headers'=> 'Content-Type, X-Auth-Token, Origin'
                           ];

    	        if($request->getMethod() == "OPTIONS")
    	        &#123;
    	          return Response::make('OK', 200, $headers);
    	        &#125;

    	        $response = $next($request);

    	        foreach($headers as $key => $value)
    	          $response->header($key, $value);

    	        return $response;
             &#125;
            &#125;
		    </code>
		  </pre>
        </li>

        <li>
          Register the <code>CORS Middleware</code>
		  <pre>
		    <code>
		    in <strong>ProjectRootDirectory\app\Http\Kernel.php</strong> file, append the following line.

		    class Kernel extends HttpKernel
		    &#123;
                      //...
                      //...
                      protected $routeMiddleware = ['cors' => \App\Http\Middleware\CORS::class];
		    &#125;
		    </code>
		  </pre>
        </li>

        <li>
          Create <code>API Routes</code>
		  <pre>
		    for RootProjectDirectory/app/Http/routes.php, refer to Step 1 (it is the complete code listing already)
		    for RootProjectDirectory/app/Http/Controllers/ApitokentestController.php, refer to Step 1 (it is the complete controler code already)
		  </pre>
        </li>

        <li>
          Create the <code>authJWT middleware</code>
		  <pre>
		    in the Root Project Directory, in the terminal, run <span class="icon-terminal"></span>: <strong>php artisan make:middleware authJWT</strong>
		    it will generate the file <strong>RootProjectDirectory\app\Http\Middleware\authJWT.php</strong>

		    <code>
              &lt;?php

              namespace App\Http\Middleware;

              use Closure;
              use JWTAuth;
              use Exception;
              class authJWT
              {
                public function handle($request, Closure $next)
                {
                  try
                  {
        	        // Find a user using the user identifier in the subject claim.
                    $user = JWTAuth::toUser($request->input('token'));
                  }
                  catch (Exception $e)
                  {
                    if ($e instanceof \Tymon\JWTAuth\Exceptions\TokenInvalidException)
                    {
                      return response()->json(['error'=>'Token is Invalid: from /app/Http/Middleware/authJWT.php',
                                               'errorCode' => 1
                                              ]);
                    }
                    else if ($e instanceof \Tymon\JWTAuth\Exceptions\TokenExpiredException)
                    {
                      return response()->json(['error'=>'Token is Expired: from /app/Http/Middleware/authJWT.php',
                                               'errorCode' => 2
                                              ]);
                    }
                    else if($e instanceof Tymon\JWTAuth\Exceptions\JWTException)
                    {
            	      return response()->json(['error' => 'Token Absent: from /app/Http/Middleware/authJWT.php',
                                               'errorCode' => 3
                                              ]);
                    }
                    else
                    {
                      return response()->json(['error'=>'Something is wrong: from /app/Http/Middleware/authJWT.php',
                                               'errorCode' => 4
                                              ]);
                    }
                  }

                  return $next($request);
                }
              }
		    </code>
		  </pre>
        </li>

        <li>
          Register the <code>authJWT middleware</code>
		  <pre>
            in the RootProjectDirectory\app\Http\Kernel.php
		    <code>
              //...
              protected $routeMiddleware = [ //...
                                             'jwt-auth' => \App\Http\Middleware\authJWT::class,
                                             //...
                                           ];
		    </code>
		  </pre>
        </li>

        <li>
          Update the <code>ApitokentestController</code>, add the register, login and get_user_details
        </li>

        <li>
          Commented out the VerifyCSRF token middleware
		  <pre>
		  Included in the web middleware group is the VerifyCSRF token that is automatically applied to the default routes.php by the RouteServiceProvider.
		  Since I am doing API-JWT based development, I wont have the need of CSRF tokens because this is being taken cared of by the JWT created by the server.
		    <code>
            In RootProjectDirectory\app\Http\Kernel.php

            // ...
            protected $middlewareGroups = ['web' => [ \App\Http\Middleware\EncryptCookies::class,
                                                      \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
                                                      \Illuminate\Session\Middleware\StartSession::class,
                                                      \Illuminate\View\Middleware\ShareErrorsFromSession::class,
                                                      /*
                                                      //\App\Http\Middleware\VerifyCsrfToken::class,
                                                      *
                                                      */
                                                    ],
                                                    'api' => ['throttle:60,1',],
                                         ];
		    </code>
		  </pre>
        </li>

        <li>
          In the terminal, in the RootProjectDirectory, run <span class="icon-terminal"></span>: <code>composer dump-autoload</code>
		  <pre>
          It will udpate the following files:
          RootProjectDirectory\vendor\composer\autoload_classmap.php
          RootProjectDirectory\vendor\composer\autoload_static.php
		  </pre>
        </li>

        <li>
          Clear Compile and Optimize
		  <pre>
		  In the RootProjectDirectory, in the terminal, run <span class="icon-terminal"></span>: 
		  <strong>php artisan clear-compiled</strong>
		  <strong>php artisan optimize</strong>

		  it will update the following files:
		  RootDirectory\vendor\composer\autoload_classmap.php
		  RootDirectory\vendor\composer\autoload_static.php
		  </pre>
        </li>
        
        <li>
          Now the testing part, In my case, I am using <code>Insomnia REST Client</code>
          <pre>
            <code>
            1. Make a POST request to http://startingpoint/api/login with the following payload:
               {"email" : "user1@somewhere.com",
                "password" : "user1"
               }
               
               which will give the following reply: (note: this is the JWT generated by the server, notice the three parts described in the JWT documentation)
               {
	             "result": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
	                        .eyJzdWIiOjEsImlzcyI6Imh0dHA6XC9cL3N0YXJ0aW5ncG9pbnRcL2FwaVwvbG9naW4iLCJpYXQiOjE0ODQxMjEyNDEsImV4cCI6MTQ4NDEyNDg0MSwibmJmIjoxNDg0MTIxMjQxLCJqdGkiOiI3MDAzZTI4YmQ3NDFlZGVmODJkY2ZiODZhZmQ2OWYyOSJ9
	                        .eEW_JjEZU_H-0T_-lAc0TTjJlGJuu8AnUcpJXpB_LXY"
               }

            2. Attempt to access any <strong>JWT-Auth</strong> protected route:
            
               In this case, a GET request to http://startingpoint/api/apitokentest with the following payload:
               {"token" : "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
	                       .eyJzdWIiOjEsImlzcyI6Imh0dHA6XC9cL3N0YXJ0aW5ncG9pbnRcL2FwaVwvbG9naW4iLCJpYXQiOjE0ODQxMjEyNDEsImV4cCI6MTQ4NDEyNDg0MSwibmJmIjoxNDg0MTIxMjQxLCJqdGkiOiI3MDAzZTI4YmQ3NDFlZGVmODJkY2ZiODZhZmQ2OWYyOSJ9
	                       .eEW_JjEZU_H-0T_-lAc0TTjJlGJuu8AnUcpJXpB_LXY",
                "data1" : "data1",
                "data2" : "data2",
                "data3" : "data3",
                "data4" : "data4"
               }
               
               notice the <strong>token</strong> in number 1 and 2 of this step.
               
               which will give the following reply: (if token is valid)
               {
	             "result": "This is the result from the INDEX function of the ApitokentestController",
	             "data1": "data1",
	             "data2": "data2",
	             "data3": "data3",
	             "data4": "data4"
               }
               
               if not, any of the configured responses in <strong>authJWT middleware</strong>.
            </code>
          </pre>
        </li
      </ol>
    </p>
  </div>
</div>            <!-- How To Do It -->";s:5:"mtime";i:1486709917;s:6:"markup";s:19689:"<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> JWT(Jason Web Token) based Authentication in Laravel 5.2 </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      A token based authentication using Jason Web Token.  Each subsequent request will require a token for it to be honored in the backend.  
      This is for routes, services and resources that requires permit by way of a particular token.
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      The name of my project is startingpoint
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      When you need a token based API with added security.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- What is JSON Web Token -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Is JSON Web Token</h1>
    <p class="fontColorWhite2 noMargin">
      JSON Web Token (JWT) is an open source standard(RFC 7519), that defines a compact and self-contained way for securely transmitting information between parties as a JSON object.
      This information can be verified and trusted because it is digitally signed by the server.  More info at https://jwt.io/introduction/
    </p>
  </div>
</div>            <!-- What is JSON Web Token -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ol>
        <li>
          Create Routes:
          
          <pre>
            in RootProjectDirectory\app\Http\routes.php
            <code>
            &lt;php

            use App\Task;
            use Illuminate\Http\Request;

            // API Token Test
            Route::group(['as' => 'apitokentestgroup::',
                          'middleware' => ['api', 'cors'],
                          'prefix' => 'api',
                         ],
                         function()
                         &#123;
                           Route::post('register', 'ApitokentestController@register');
                           Route::post('login', 'ApitokentestController@login');
                           Route::group(['middleware' => 'jwt-auth'],
                                        function()
                                        &#123;
                                          Route::post('get_user_details', 'ApitokentestController@get_user_details');
                                          Route::resource('apitokentest', 'ApitokentestController');
                                        &#125;
                                       );
                         &#125;
                       );
            </code>
          </pre>
        </li>

        <li>
          Create a Controller:
          
          <pre>
            <code>
              &lt;php

                namespace App\Http\Controllers;

                use Illuminate\Http\Request;
                use App\User;
                use Hash;
                use JWTAuth;
                use App\Role;
                use App\Permission;

                class ApitokentestController extends Controller
                &#123;
	              public function index( Request $request )
	              &#123;
		            $input = $request->all();
		            $user = JWTAuth::toUser($input['token']);
		
		            if($user->can('can-do-everything'))
		            &#123;
			          return response()->json(['result' => 'This is the result from the INDEX function of the ApitokentestController',
                                               'data1' => $input['data1'],
                                               'data2' => $input['data2'],
                                               'data3' => $input['data3'],
                                               'data4' => $input['data4'],
                                              ]);
                    &#125;

                    return response()->json(['result' => 'This is the result from the INDEX function of the ApitokentestController, ACCCESS DENIED',]);
	              &#125;

	              public function store()
	              &#123;
                    return response()->json(['result' => 'This is the result from the STORE function of the ApitokentestController']);
                  &#125;

	              public function create()
                  &#123;
                    return response()->json(['result' => 'This is the result from the CREATE function of the ApitokentestController']);
                  &#125;

                  public function show()
                  &#123;
                    return response()->json(['result' => 'This is the result from the SHOW function of the ApitokentestController']);
                  &#125;

                  public function update()
                  &#123;
                    return response()->json(['result' => 'This is the result from the UPDATE function of the ApitokentestController']);
                  &#125;

                  public function destroy()
                  &#123;
                    return response()->json(['result' => 'This is the result from the DESTROY function of the ApitokentestController']);
                  &#124;

                  public function edit()
                  &#123;
                    return response()->json(['result' => 'This is the result from the EDIT function of the ApitokentestController']);
                  &#125;

                  public function get_user_details()
                  &#123;
                    $input = $request->all();
                    $user = JWTAuth::toUser($input['token']);
                    return response()->json(['result' => $user]);

                    //return response()->json(['result' => 'This is the result from the get_user_details function of the ApitokentestController']);
                  &#125;

                  public function register(Request $request)
                  &#123;
                    $input = $request->all();
                    $input['password'] = Hash::make($input['password']);
                    $input['role'] = 2; // default role code

                    $result = User::create($input);

                    // assign a role and permission set to the newly created user

                    // assign a role and permission set to the newly created user

                    return response()->json(['result'=>true]);
	              &#125;

                  public function login(Request $request)
                  &#123;
                    $input = $request->all();

                    if (!$token = JWTAuth::attempt($input))
                    &#123;
                      return response()->json(['result' => 'wrong email or password.']);
                    &#125;

                    return response()->json(['result' => $token]);
                  &#125;

                &#125;
            </code>
          </pre>
        </li>

        <li>
          JWT Installation <br>

          In the <code>RootProjectDirectory</code>, run <span class="icon-terminal"></span>: <code>composer require tymon/jwt-auth</code>
        </li>

        <li>
		  Add the JWT service provider and alias to app.php, and publish the JWT configuration file.  
		  
		  <pre>
		    In RootProjectDirectory\config\app.php
		    <code>
              //...
              'providers' =&gt; [ //...
                                  /*
                                  * Custom Providers
                                   */
                                  'Tymon\JWTAuth\Providers\JWTAuthServiceProvider', &lt;--- the JWT service provider
                                ];

              //...

              'aliases' =&gt; [ //...
                                'JWTAuth' => 'Tymon\JWTAuth\Facades\JWTAuth', &lt;--- the JWT alias
                              ];
		    </code>

            Then to <strong>publish</strong> the JWT configuration file, in the RootProjectDirectory in the terminal, 
            run <span class="icon-terminal"></span>: <strong>php artisan vendor:publish --provider = "Tymon\JWTAuth\Providers\JWTAuthServiceProvider"</strong>
		  </pre>
        </li>

        <li>
          Generate the JWT Key
          <pre>
            In the terminal while in the project root directory,
            run <span class="icon-terminal"></span>: <strong>php artisan jwt:generate</strong>
            it will update the value of the <strong>secret</strong> index of the jwt.php return array.
          </pre>
        </li>

        <li>
          Create the <code>CORS middleware</code>
		  <pre>
		    <code>
		    This solves the issue of <strong>Cross-Origin Request Blocked: The Same Origin Polciy</strong>

		    in the terminal in the Root Project Directory, run <span class="icon-terminal"></span>: php artisan make:middleware CORS
		    it will generate the file, <strong>RootProjectDirectory/app/Http/Middleware/CORS.php</strong>
		    edit it to have the following code:
		    
            &lt;?php

            namespace App\Http\Middleware;

            use Closure;

            class CORS
            &#123;
              /**
               * Handle an incoming request.
               *
               * @param  \Illuminate\Http\Request  $request
               * @param  \Closure  $next
               * @return mixed
              */
              public function handle($request, Closure $next)
              &#123;
    	        header('Access-Control-Allow-Origin: *');

    	        $headers = ['Access-Control-Allow-Methods'=> 'POST, GET, OPTIONS, PUT, DELETE',
                            'Access-Control-Allow-Headers'=> 'Content-Type, X-Auth-Token, Origin'
                           ];

    	        if($request->getMethod() == "OPTIONS")
    	        &#123;
    	          return Response::make('OK', 200, $headers);
    	        &#125;

    	        $response = $next($request);

    	        foreach($headers as $key => $value)
    	          $response->header($key, $value);

    	        return $response;
             &#125;
            &#125;
		    </code>
		  </pre>
        </li>

        <li>
          Register the <code>CORS Middleware</code>
		  <pre>
		    <code>
		    in <strong>ProjectRootDirectory\app\Http\Kernel.php</strong> file, append the following line.

		    class Kernel extends HttpKernel
		    &#123;
                      //...
                      //...
                      protected $routeMiddleware = ['cors' => \App\Http\Middleware\CORS::class];
		    &#125;
		    </code>
		  </pre>
        </li>

        <li>
          Create <code>API Routes</code>
		  <pre>
		    for RootProjectDirectory/app/Http/routes.php, refer to Step 1 (it is the complete code listing already)
		    for RootProjectDirectory/app/Http/Controllers/ApitokentestController.php, refer to Step 1 (it is the complete controler code already)
		  </pre>
        </li>

        <li>
          Create the <code>authJWT middleware</code>
		  <pre>
		    in the Root Project Directory, in the terminal, run <span class="icon-terminal"></span>: <strong>php artisan make:middleware authJWT</strong>
		    it will generate the file <strong>RootProjectDirectory\app\Http\Middleware\authJWT.php</strong>

		    <code>
              &lt;?php

              namespace App\Http\Middleware;

              use Closure;
              use JWTAuth;
              use Exception;
              class authJWT
              {
                public function handle($request, Closure $next)
                {
                  try
                  {
        	        // Find a user using the user identifier in the subject claim.
                    $user = JWTAuth::toUser($request->input('token'));
                  }
                  catch (Exception $e)
                  {
                    if ($e instanceof \Tymon\JWTAuth\Exceptions\TokenInvalidException)
                    {
                      return response()->json(['error'=>'Token is Invalid: from /app/Http/Middleware/authJWT.php',
                                               'errorCode' => 1
                                              ]);
                    }
                    else if ($e instanceof \Tymon\JWTAuth\Exceptions\TokenExpiredException)
                    {
                      return response()->json(['error'=>'Token is Expired: from /app/Http/Middleware/authJWT.php',
                                               'errorCode' => 2
                                              ]);
                    }
                    else if($e instanceof Tymon\JWTAuth\Exceptions\JWTException)
                    {
            	      return response()->json(['error' => 'Token Absent: from /app/Http/Middleware/authJWT.php',
                                               'errorCode' => 3
                                              ]);
                    }
                    else
                    {
                      return response()->json(['error'=>'Something is wrong: from /app/Http/Middleware/authJWT.php',
                                               'errorCode' => 4
                                              ]);
                    }
                  }

                  return $next($request);
                }
              }
		    </code>
		  </pre>
        </li>

        <li>
          Register the <code>authJWT middleware</code>
		  <pre>
            in the RootProjectDirectory\app\Http\Kernel.php
		    <code>
              //...
              protected $routeMiddleware = [ //...
                                             'jwt-auth' => \App\Http\Middleware\authJWT::class,
                                             //...
                                           ];
		    </code>
		  </pre>
        </li>

        <li>
          Update the <code>ApitokentestController</code>, add the register, login and get_user_details
        </li>

        <li>
          Commented out the VerifyCSRF token middleware
		  <pre>
		  Included in the web middleware group is the VerifyCSRF token that is automatically applied to the default routes.php by the RouteServiceProvider.
		  Since I am doing API-JWT based development, I wont have the need of CSRF tokens because this is being taken cared of by the JWT created by the server.
		    <code>
            In RootProjectDirectory\app\Http\Kernel.php

            // ...
            protected $middlewareGroups = ['web' => [ \App\Http\Middleware\EncryptCookies::class,
                                                      \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
                                                      \Illuminate\Session\Middleware\StartSession::class,
                                                      \Illuminate\View\Middleware\ShareErrorsFromSession::class,
                                                      /*
                                                      //\App\Http\Middleware\VerifyCsrfToken::class,
                                                      *
                                                      */
                                                    ],
                                                    'api' => ['throttle:60,1',],
                                         ];
		    </code>
		  </pre>
        </li>

        <li>
          In the terminal, in the RootProjectDirectory, run <span class="icon-terminal"></span>: <code>composer dump-autoload</code>
		  <pre>
          It will udpate the following files:
          RootProjectDirectory\vendor\composer\autoload_classmap.php
          RootProjectDirectory\vendor\composer\autoload_static.php
		  </pre>
        </li>

        <li>
          Clear Compile and Optimize
		  <pre>
		  In the RootProjectDirectory, in the terminal, run <span class="icon-terminal"></span>: 
		  <strong>php artisan clear-compiled</strong>
		  <strong>php artisan optimize</strong>

		  it will update the following files:
		  RootDirectory\vendor\composer\autoload_classmap.php
		  RootDirectory\vendor\composer\autoload_static.php
		  </pre>
        </li>
        
        <li>
          Now the testing part, In my case, I am using <code>Insomnia REST Client</code>
          <pre>
            <code>
            1. Make a POST request to http://startingpoint/api/login with the following payload:
               {"email" : "user1@somewhere.com",
                "password" : "user1"
               }
               
               which will give the following reply: (note: this is the JWT generated by the server, notice the three parts described in the JWT documentation)
               {
	             "result": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
	                        .eyJzdWIiOjEsImlzcyI6Imh0dHA6XC9cL3N0YXJ0aW5ncG9pbnRcL2FwaVwvbG9naW4iLCJpYXQiOjE0ODQxMjEyNDEsImV4cCI6MTQ4NDEyNDg0MSwibmJmIjoxNDg0MTIxMjQxLCJqdGkiOiI3MDAzZTI4YmQ3NDFlZGVmODJkY2ZiODZhZmQ2OWYyOSJ9
	                        .eEW_JjEZU_H-0T_-lAc0TTjJlGJuu8AnUcpJXpB_LXY"
               }

            2. Attempt to access any <strong>JWT-Auth</strong> protected route:
            
               In this case, a GET request to http://startingpoint/api/apitokentest with the following payload:
               {"token" : "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
	                       .eyJzdWIiOjEsImlzcyI6Imh0dHA6XC9cL3N0YXJ0aW5ncG9pbnRcL2FwaVwvbG9naW4iLCJpYXQiOjE0ODQxMjEyNDEsImV4cCI6MTQ4NDEyNDg0MSwibmJmIjoxNDg0MTIxMjQxLCJqdGkiOiI3MDAzZTI4YmQ3NDFlZGVmODJkY2ZiODZhZmQ2OWYyOSJ9
	                       .eEW_JjEZU_H-0T_-lAc0TTjJlGJuu8AnUcpJXpB_LXY",
                "data1" : "data1",
                "data2" : "data2",
                "data3" : "data3",
                "data4" : "data4"
               }
               
               notice the <strong>token</strong> in number 1 and 2 of this step.
               
               which will give the following reply: (if token is valid)
               {
	             "result": "This is the result from the INDEX function of the ApitokentestController",
	             "data1": "data1",
	             "data2": "data2",
	             "data3": "data3",
	             "data4": "data4"
               }
               
               if not, any of the configured responses in <strong>authJWT middleware</strong>.
            </code>
          </pre>
        </li
      </ol>
    </p>
  </div>
</div>            <!-- How To Do It -->";s:4:"code";N;s:5:"title";s:18:"JWT Authentication";s:3:"url";s:19:"/jwt-authentication";s:6:"layout";s:25:"laravel5-2TutorialsLayout";s:9:"is_hidden";s:1:"0";}}