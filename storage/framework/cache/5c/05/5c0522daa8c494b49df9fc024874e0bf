1490241745a:1:{s:20:"laravel5.2/queue.htm";a:10:{s:8:"fileName";s:20:"laravel5.2/queue.htm";s:7:"content";s:15051:"title = "Queue"
url = "/queue"
layout = "laravel5-2TutorialsLayout"
description = "Queue Service"
is_hidden = 0
==
<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> Queue </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      The Laravel queue service provides a unified API across a variety of different queue back-ends.
      Queues allow you to defer the processing of a time consuming task, such as sending an e-mail, until a later time which drastically speeds up web requests to your application.
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      I am using the "<code>database</code>" driver for this example.  <code>startingpoint</code> is the name of my project.
      <p>
        Try- Catch and proper handling of possible exception occurence.
        
        Design the job to succeed, because some failures are not recoverable for us
      </p>
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      When there is a long running piece of <code>Task</code>.  Make a job for it, and dispatch it to the Queue Service.
      The entire application will run faster if it is designed this way.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ol>
        <li>
          In the <code>RootProjectDirectory\.env</code>, set <code>QUEUE_DRIVER=database</code>
        </li>

        <li>
          Since I am using the <code>database</code> driver
          <pre>
            <code>
              In the terminal, in the <strong>RootProjectDirectory</strong>, run<span class="icon-terminal"></span>: php artisan queue:table
              This will create the <strong>timestamp_create_jobs_table.php</strong> migration.
              Then run it <span class="icon-terminal"></span>: php artisan migrate
            </code>
          </pre>
        </li>

        <li>
          Prepare for <code>failed job</code> contingency
          <pre>
            <code>
              In the terminal, in the <strong>RootProjectDirectory</strong>, run<span class="icon-terminal"></span>: php artisan queue:failed-table
              This will create the <strong>timestamp_create_failed_jobs_table.php</strong> migration.
              Then run it <span class="icon-terminal"></span>: php artisan migrate
            </code>
          </pre>
        </li>

        <li>
          Configure <code>Supervisor</code> (this is the one that will ensure that the queue listener does not stop running).  Refer to http://supervisord.org/configuration.html for the documentation of the configuration settings.
          <pre>
            In my case, I created a file, <strong>/etc/supervisor/conf.d/laravel-worker1.conf</strong>, with the following instructions in it.
            <code>
              [program:laravel-worker1]
              process_name=%(program_name)s_%(process_num)02d
              command=php /home/vagrant/Code/PersonalProjects/StartingPointLaravel5-2-29LTS/artisan queue:listen database --sleep=3 --tries=3
              autostart=true
              autorestart=true
              user=root
              numprocs=2
              redirect_stderr=true
              stdout_logfile=/var/log/laravel-worker1.log
            </code>
          </pre>
        </li>
        
        <li>
          Create a <code>route</code> for testing
          <pre>
            In the <strong>RootProjectDirectory\app\Http\routes.php</strong>
            <code>
              //...
              Route::get('/queueTest','QueueTestController@queueTest');
            </code>
          </pre>
        </li>
        
        <li>
          Create a <code>Controller</code> for testing
          <pre>
            In the <strong>RootProjectDirectory\app\Http\Controllers\QueueTestController.php</strong>
            <code>
              &lt;?php

                namespace App\Http\Controllers;

                use Illuminate\Http\Request;
                use App\Http\Requests;
                use App\User;
                use App\Jobs\TestJob1;

                class QueueTestController extends Controller
                {
                  public function jobEventTest()
                  {
                    $testVariable = 'test value';
                    $user = User::where('id', '=', 1)->first();
                    $this->dispatch(new TestJob1($user));

                    exit('jobEventTest function of QueueTestController.');
                  }

                  public function queueTest(Request $request)
                  {
                    $input = $request->all();
                    $user = User::where('id', '=', 1)->first();

                    $this->dispatch( new TestJob1($user, $input['failFlag']));
                    exit('this is the queueTest function() of the QueueTestController');
                  }
                }
            </code>
          </pre>
        </li>

        <li>
          Generate a <code>Job Class</code>
          <pre>
            <code>
              In the terminal, in the <strong>RootProjectDirectory</strong>, run<span class="icon-terminal"></span>: php artisan make:job TestJob1
              This will create the file <strong>RootProjectDirectory\app\Jobs\TestJob1.php</strong>, this is how my code looks like:
              
              &lt;?php

              namespace App\Jobs;

              use App\Jobs\Job;
              use Illuminate\Queue\SerializesModels;      // Because of the SerializesModels trait that the job is using, 
                                                          // Eloquent models will be gracefully serialized and unserialized when the job is processing.
                                                          // If your queued job accepts an Eloquent model in its constructor, only the identifier for the
                                                          // model will be serialized onto the queue.
                                                          // When the job is actually handled, the queue system will automatically re-retrieve
                                                          // the full model instance from the database.
                                                          // It's all totally transparent to your application and prevents issues that can
                                                          // arise from serializing full Eloquent model instances.

              use Illuminate\Queue\InteractsWithQueue;    // Traits with methods that let you interact with the queue
              use Illuminate\Contracts\Queue\ShouldQueue; // Indicating to Laravel that the job should be pushed onto the queue instead of run synchronously.
              use App\User;

              class TestJob1 extends Job implements ShouldQueue
              {
                use InteractsWithQueue, SerializesModels;

                protected $user;
                protected $failFlag;
                /**
                 * Create a new job instance.
                 *
                 * @return void
                */
                public function __construct(User $user1, $failFlag)
                {
                  $this->user = $user1;
                  $this->failFlag = $failFlag;
                }

                /**
                 * Execute the job.
                 *
                 * @return void
                */
                public function handle()
                {
    	          if( 'false' == $this->failFlag )
    	          {
    		        sleep(20);
    		        $testVariable1 = 'test value 1';
    	          }
                  else
                  {
        	        throw new Exception('Test Job 1 Failed');
                  }
                }

               public function failed()
               {
    	         $this->failFlag = 'false';

    	         if( 'false' == $this->failFlag )
    	         {
    		       sleep(20);
    		       $testVariable1 = 'test value 1';
    	         }
               }
             }
            </code>
          </pre>
        </li>

        <li>
          Access it in the browser: <code>http://startingpoint/queueTest?failFlag=false</code>.
          <pre>
            For a few seconds, a job should be created and stored in the <strong>jobs</strong> table, and when the <strong>queue service</strong> is finished with it, it will be removed.
          </pre>
        </li>

      </ol>
    </p>
  </div>
</div>            <!-- How To Do It -->



<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> Simulating Failed Jobs </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      Simulates what will happen if a job will fail.
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      The above code is the subject of this demonstration
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      This is just for testing and observation purposes.  When you want to simulate a failed job.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ol>
        <li>
          Access it in the browser: <code>startingpoint/queueTest?failFlag=true</code> to simulate a failed job
        </li>

        <li>
          <pre>
            Verify it in the terminal, in the RootProjectDirectory, run<span class="icon-terminal"></span>:  <strong>php artisan queue:failed</strong> or
            In the database, <strong>select * from failed_jobs</strong>
          </pre>
        </li>
      </ol>
    </p>
  </div>
</div>            <!-- How To Do It -->



<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> Job Events </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      The Queue::before and Queue::after methods allow you to register a callback to be executed before a queued job is started or when it executes successfully.
      The callbacks are great opportunity to perform additional logging, queue a subsequent job, or increment statistics for a dashboard. 
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      None
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      When you want to perform additional logic right before or right after a job is started.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ol>
        <li>
          In <code>ProjectRootDirectory\app\Providers\AppServiceProvider.php</code>
          <pre>
            <code>
              &lt;?php

              namespace App\Providers;

              use Queue;
              use Illuminate\Support\ServiceProvider;
              use Illuminate\Queue\Events\JobProcessed;

              class AppServiceProvider extends ServiceProvider
              {
                /**
                 * Bootstrap any application services.
                 *
                 * @return void
                */
                public function boot()
                {
    	          Queue::after(function (JobProcessed $event)
			    	           {
			    	             $connectionName = $event->connectionName;
			    	             $job = $event->job;
			    	             $data = $event->data;
			    	             $testVariable = 'test Value1';

			    	             echo "&lt;pre&gt;";
			    	             var_dump($connectionName);
			    	             exit('frederick debugging here');
			    	           }
    				          );
               }

               /**
                * Register any application services.
                *
                * @return void
               */
               public function register()
               {
                 //
               }
              }
            </code>
          </pre>
        </li>

        <li>
          Access it in the browser <code>http://startingpoint/queueTest?failFlag=false</code>
        </li>

      </ol>
    </p>
  </div>
</div>            <!-- How To Do It -->";s:5:"mtime";i:1488086991;s:6:"markup";s:14936:"<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> Queue </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      The Laravel queue service provides a unified API across a variety of different queue back-ends.
      Queues allow you to defer the processing of a time consuming task, such as sending an e-mail, until a later time which drastically speeds up web requests to your application.
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      I am using the "<code>database</code>" driver for this example.  <code>startingpoint</code> is the name of my project.
      <p>
        Try- Catch and proper handling of possible exception occurence.
        
        Design the job to succeed, because some failures are not recoverable for us
      </p>
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      When there is a long running piece of <code>Task</code>.  Make a job for it, and dispatch it to the Queue Service.
      The entire application will run faster if it is designed this way.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ol>
        <li>
          In the <code>RootProjectDirectory\.env</code>, set <code>QUEUE_DRIVER=database</code>
        </li>

        <li>
          Since I am using the <code>database</code> driver
          <pre>
            <code>
              In the terminal, in the <strong>RootProjectDirectory</strong>, run<span class="icon-terminal"></span>: php artisan queue:table
              This will create the <strong>timestamp_create_jobs_table.php</strong> migration.
              Then run it <span class="icon-terminal"></span>: php artisan migrate
            </code>
          </pre>
        </li>

        <li>
          Prepare for <code>failed job</code> contingency
          <pre>
            <code>
              In the terminal, in the <strong>RootProjectDirectory</strong>, run<span class="icon-terminal"></span>: php artisan queue:failed-table
              This will create the <strong>timestamp_create_failed_jobs_table.php</strong> migration.
              Then run it <span class="icon-terminal"></span>: php artisan migrate
            </code>
          </pre>
        </li>

        <li>
          Configure <code>Supervisor</code> (this is the one that will ensure that the queue listener does not stop running).  Refer to http://supervisord.org/configuration.html for the documentation of the configuration settings.
          <pre>
            In my case, I created a file, <strong>/etc/supervisor/conf.d/laravel-worker1.conf</strong>, with the following instructions in it.
            <code>
              [program:laravel-worker1]
              process_name=%(program_name)s_%(process_num)02d
              command=php /home/vagrant/Code/PersonalProjects/StartingPointLaravel5-2-29LTS/artisan queue:listen database --sleep=3 --tries=3
              autostart=true
              autorestart=true
              user=root
              numprocs=2
              redirect_stderr=true
              stdout_logfile=/var/log/laravel-worker1.log
            </code>
          </pre>
        </li>
        
        <li>
          Create a <code>route</code> for testing
          <pre>
            In the <strong>RootProjectDirectory\app\Http\routes.php</strong>
            <code>
              //...
              Route::get('/queueTest','QueueTestController@queueTest');
            </code>
          </pre>
        </li>
        
        <li>
          Create a <code>Controller</code> for testing
          <pre>
            In the <strong>RootProjectDirectory\app\Http\Controllers\QueueTestController.php</strong>
            <code>
              &lt;?php

                namespace App\Http\Controllers;

                use Illuminate\Http\Request;
                use App\Http\Requests;
                use App\User;
                use App\Jobs\TestJob1;

                class QueueTestController extends Controller
                {
                  public function jobEventTest()
                  {
                    $testVariable = 'test value';
                    $user = User::where('id', '=', 1)->first();
                    $this->dispatch(new TestJob1($user));

                    exit('jobEventTest function of QueueTestController.');
                  }

                  public function queueTest(Request $request)
                  {
                    $input = $request->all();
                    $user = User::where('id', '=', 1)->first();

                    $this->dispatch( new TestJob1($user, $input['failFlag']));
                    exit('this is the queueTest function() of the QueueTestController');
                  }
                }
            </code>
          </pre>
        </li>

        <li>
          Generate a <code>Job Class</code>
          <pre>
            <code>
              In the terminal, in the <strong>RootProjectDirectory</strong>, run<span class="icon-terminal"></span>: php artisan make:job TestJob1
              This will create the file <strong>RootProjectDirectory\app\Jobs\TestJob1.php</strong>, this is how my code looks like:
              
              &lt;?php

              namespace App\Jobs;

              use App\Jobs\Job;
              use Illuminate\Queue\SerializesModels;      // Because of the SerializesModels trait that the job is using, 
                                                          // Eloquent models will be gracefully serialized and unserialized when the job is processing.
                                                          // If your queued job accepts an Eloquent model in its constructor, only the identifier for the
                                                          // model will be serialized onto the queue.
                                                          // When the job is actually handled, the queue system will automatically re-retrieve
                                                          // the full model instance from the database.
                                                          // It's all totally transparent to your application and prevents issues that can
                                                          // arise from serializing full Eloquent model instances.

              use Illuminate\Queue\InteractsWithQueue;    // Traits with methods that let you interact with the queue
              use Illuminate\Contracts\Queue\ShouldQueue; // Indicating to Laravel that the job should be pushed onto the queue instead of run synchronously.
              use App\User;

              class TestJob1 extends Job implements ShouldQueue
              {
                use InteractsWithQueue, SerializesModels;

                protected $user;
                protected $failFlag;
                /**
                 * Create a new job instance.
                 *
                 * @return void
                */
                public function __construct(User $user1, $failFlag)
                {
                  $this->user = $user1;
                  $this->failFlag = $failFlag;
                }

                /**
                 * Execute the job.
                 *
                 * @return void
                */
                public function handle()
                {
    	          if( 'false' == $this->failFlag )
    	          {
    		        sleep(20);
    		        $testVariable1 = 'test value 1';
    	          }
                  else
                  {
        	        throw new Exception('Test Job 1 Failed');
                  }
                }

               public function failed()
               {
    	         $this->failFlag = 'false';

    	         if( 'false' == $this->failFlag )
    	         {
    		       sleep(20);
    		       $testVariable1 = 'test value 1';
    	         }
               }
             }
            </code>
          </pre>
        </li>

        <li>
          Access it in the browser: <code>http://startingpoint/queueTest?failFlag=false</code>.
          <pre>
            For a few seconds, a job should be created and stored in the <strong>jobs</strong> table, and when the <strong>queue service</strong> is finished with it, it will be removed.
          </pre>
        </li>

      </ol>
    </p>
  </div>
</div>            <!-- How To Do It -->



<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> Simulating Failed Jobs </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      Simulates what will happen if a job will fail.
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      The above code is the subject of this demonstration
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      This is just for testing and observation purposes.  When you want to simulate a failed job.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ol>
        <li>
          Access it in the browser: <code>startingpoint/queueTest?failFlag=true</code> to simulate a failed job
        </li>

        <li>
          <pre>
            Verify it in the terminal, in the RootProjectDirectory, run<span class="icon-terminal"></span>:  <strong>php artisan queue:failed</strong> or
            In the database, <strong>select * from failed_jobs</strong>
          </pre>
        </li>
      </ol>
    </p>
  </div>
</div>            <!-- How To Do It -->



<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> Job Events </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      The Queue::before and Queue::after methods allow you to register a callback to be executed before a queued job is started or when it executes successfully.
      The callbacks are great opportunity to perform additional logging, queue a subsequent job, or increment statistics for a dashboard. 
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      None
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      When you want to perform additional logic right before or right after a job is started.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ol>
        <li>
          In <code>ProjectRootDirectory\app\Providers\AppServiceProvider.php</code>
          <pre>
            <code>
              &lt;?php

              namespace App\Providers;

              use Queue;
              use Illuminate\Support\ServiceProvider;
              use Illuminate\Queue\Events\JobProcessed;

              class AppServiceProvider extends ServiceProvider
              {
                /**
                 * Bootstrap any application services.
                 *
                 * @return void
                */
                public function boot()
                {
    	          Queue::after(function (JobProcessed $event)
			    	           {
			    	             $connectionName = $event->connectionName;
			    	             $job = $event->job;
			    	             $data = $event->data;
			    	             $testVariable = 'test Value1';

			    	             echo "&lt;pre&gt;";
			    	             var_dump($connectionName);
			    	             exit('frederick debugging here');
			    	           }
    				          );
               }

               /**
                * Register any application services.
                *
                * @return void
               */
               public function register()
               {
                 //
               }
              }
            </code>
          </pre>
        </li>

        <li>
          Access it in the browser <code>http://startingpoint/queueTest?failFlag=false</code>
        </li>

      </ol>
    </p>
  </div>
</div>            <!-- How To Do It -->";s:4:"code";N;s:5:"title";s:5:"Queue";s:3:"url";s:6:"/queue";s:6:"layout";s:25:"laravel5-2TutorialsLayout";s:11:"description";s:13:"Queue Service";s:9:"is_hidden";s:1:"0";}}