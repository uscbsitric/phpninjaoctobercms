1488335888a:1:{s:32:"laravel5.2/pusherIntegration.htm";a:10:{s:8:"fileName";s:32:"laravel5.2/pusherIntegration.htm";s:7:"content";s:6591:"title = "Pusher Integration"
url = "/pusher-integration"
layout = "laravel5-2TutorialsLayout"
description = "Pusher Integration"
is_hidden = 0
==
<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> Pusher Integration (Simple Push Notification) </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      Laravel 5.2 Events will be broadcasted over to <code>Pusher</code> so that <code>Pusher</code> can send it to the corresponding subscribers.
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      Make sure that the local machine or host machine and the virtual box machine has the same time with Singapore because that is where the Pusher application cluster is deployed.
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      When you want events to be broadcasted over to <code>Pusher</code> to do Push Notifications.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      There will be 2 configurations, the Backend and the Frontend.

      <ol>
        <li>
          Backend Code and Configurations
        </li>

        <li>
          Create a Pusher Application at pusher.com and take note of the following: <code>app_id</code>, <code>key</code>, <code>secret</code>, <code>cluster</code>
        </li>
        
        <li>
          Create a route for testing this integration
          <pre>
            <code>
            In the rootProrjectDirectory\app\Http\routes.php

            Route::get('/eventsTesting',
	                   'EventsTestController@eventtest'
		              );
            </code>
          </pre>
        </li>
        
        <li>
          Import the Pusher Library
          <pre>
            <code>
            In the rootProjectDirectory, in the terminal, run <span class="icon-terminal"></span>: <strong>composer require pusher/pusher-php-server ~2.0</strong>
            then run <span class="icon-terminal"></span>: <strong>composer install</strong>
            </code>
          </pre>
        </li>

        <li>
          Configure pusher credentials in the .env file
          <pre>
            <code>
            BROADCAST_DRIVER=pusher
            PUSHER_KEY=pusherKeyFromPusherDotComApplication
            PUSHER_SECRET=pusherSecretFromPusherDotComApplication
            PUSHER_APP_ID=pusherAppIDFromPusherDotComApplication
            </code>
          </pre>
        </li>

        <li>
		  Implement the ShouldBroadCast contract in the Event
		  <pre>
		    In the rootProjectDirectory\app\Events\TestEvent1.php
		    <code>
            &lt;?php

            namespace App\Events;

            use App\User;
            use App\Events\Event;
            use Illuminate\Queue\SerializesModels;
            use Illuminate\Contracts\Broadcasting\ShouldBroadcast;

            // An Event Class is simply a data container which holds the information related to the event.
            // For example, our TestEvent1 recieves the Eloquent ORM object.
            // As you can see, this event class contains no logic.  It is simply a container for the User object
            // that was created.
            class TestEvent1 extends Event <strong>implements ShouldBroadcast</strong>
            {
              use SerializesModels;  // the SerializesModels trait used by the event will gracefully serialize any Eloquent models
                                     // if the event will gracefully serialize any Eloquent models if the event object is serialized
                                     // using PHPs serialize function.

              public $user;
              public $testVar1;
              public $testVar2;

              /**
               * Create a new event instance.
               *
               * @return void
              */
              public function __construct(User $user)
              {
                $this->user = $user;
                $testVariable = 'testValue';
                $this->testVar1 = 'si Bertrand gwapo kaayu';
                $this->testVar2 = 'si Freds ninja';
              }
              
              ...

            }
		    </code>
		  </pre>
        </li>

        <li>
		  Fill the logic for broadcastOn and broadCastAs methods
		  <pre>
		    <code>
              /**
               * return an array of channels the event should be broadcast on.
               *
               * @return array
              */
              public function broadcastOn()
              {
    	        $channels = array('my-channel');
                return $channels;
              }

              public function broadcastAs()
              {
    	        $eventName = 'my-event';
    	        return $eventName;
              }
		    </code>
		  </pre>
        </li>

        <li>
		  Fire the event
		  <pre>
		    In the rootProjectDirectory\app\Http\Controllers\EventsTestController.php
		    <code>
		    
		    </code>
		  </pre>
        </li>
      </ol>


      <ol>
        <li>
          Frontend Code and Configurations
        </li>

        <li>
          Configure pusher client creation
		  <pre>
		    <code>
		    </code>
		  </pre>
        </li>

        <li>
          Listen to a channel
		  <pre>
		    <code>
		    </code>
		  </pre>
        </li>

        <li>
		  Subscribe to an event and execute logic when the event occurs
		  <pre>
		    <code>
		    </code>
		  </pre>
        </li>
      </ol>
    </p>
  </div>
</div>            <!-- How To Do It -->";s:5:"mtime";i:1488335286;s:6:"markup";s:6445:"<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> Pusher Integration (Simple Push Notification) </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      Laravel 5.2 Events will be broadcasted over to <code>Pusher</code> so that <code>Pusher</code> can send it to the corresponding subscribers.
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      Make sure that the local machine or host machine and the virtual box machine has the same time with Singapore because that is where the Pusher application cluster is deployed.
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      When you want events to be broadcasted over to <code>Pusher</code> to do Push Notifications.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      There will be 2 configurations, the Backend and the Frontend.

      <ol>
        <li>
          Backend Code and Configurations
        </li>

        <li>
          Create a Pusher Application at pusher.com and take note of the following: <code>app_id</code>, <code>key</code>, <code>secret</code>, <code>cluster</code>
        </li>
        
        <li>
          Create a route for testing this integration
          <pre>
            <code>
            In the rootProrjectDirectory\app\Http\routes.php

            Route::get('/eventsTesting',
	                   'EventsTestController@eventtest'
		              );
            </code>
          </pre>
        </li>
        
        <li>
          Import the Pusher Library
          <pre>
            <code>
            In the rootProjectDirectory, in the terminal, run <span class="icon-terminal"></span>: <strong>composer require pusher/pusher-php-server ~2.0</strong>
            then run <span class="icon-terminal"></span>: <strong>composer install</strong>
            </code>
          </pre>
        </li>

        <li>
          Configure pusher credentials in the .env file
          <pre>
            <code>
            BROADCAST_DRIVER=pusher
            PUSHER_KEY=pusherKeyFromPusherDotComApplication
            PUSHER_SECRET=pusherSecretFromPusherDotComApplication
            PUSHER_APP_ID=pusherAppIDFromPusherDotComApplication
            </code>
          </pre>
        </li>

        <li>
		  Implement the ShouldBroadCast contract in the Event
		  <pre>
		    In the rootProjectDirectory\app\Events\TestEvent1.php
		    <code>
            &lt;?php

            namespace App\Events;

            use App\User;
            use App\Events\Event;
            use Illuminate\Queue\SerializesModels;
            use Illuminate\Contracts\Broadcasting\ShouldBroadcast;

            // An Event Class is simply a data container which holds the information related to the event.
            // For example, our TestEvent1 recieves the Eloquent ORM object.
            // As you can see, this event class contains no logic.  It is simply a container for the User object
            // that was created.
            class TestEvent1 extends Event <strong>implements ShouldBroadcast</strong>
            {
              use SerializesModels;  // the SerializesModels trait used by the event will gracefully serialize any Eloquent models
                                     // if the event will gracefully serialize any Eloquent models if the event object is serialized
                                     // using PHPs serialize function.

              public $user;
              public $testVar1;
              public $testVar2;

              /**
               * Create a new event instance.
               *
               * @return void
              */
              public function __construct(User $user)
              {
                $this->user = $user;
                $testVariable = 'testValue';
                $this->testVar1 = 'si Bertrand gwapo kaayu';
                $this->testVar2 = 'si Freds ninja';
              }
              
              ...

            }
		    </code>
		  </pre>
        </li>

        <li>
		  Fill the logic for broadcastOn and broadCastAs methods
		  <pre>
		    <code>
              /**
               * return an array of channels the event should be broadcast on.
               *
               * @return array
              */
              public function broadcastOn()
              {
    	        $channels = array('my-channel');
                return $channels;
              }

              public function broadcastAs()
              {
    	        $eventName = 'my-event';
    	        return $eventName;
              }
		    </code>
		  </pre>
        </li>

        <li>
		  Fire the event
		  <pre>
		    In the rootProjectDirectory\app\Http\Controllers\EventsTestController.php
		    <code>
		    
		    </code>
		  </pre>
        </li>
      </ol>


      <ol>
        <li>
          Frontend Code and Configurations
        </li>

        <li>
          Configure pusher client creation
		  <pre>
		    <code>
		    </code>
		  </pre>
        </li>

        <li>
          Listen to a channel
		  <pre>
		    <code>
		    </code>
		  </pre>
        </li>

        <li>
		  Subscribe to an event and execute logic when the event occurs
		  <pre>
		    <code>
		    </code>
		  </pre>
        </li>
      </ol>
    </p>
  </div>
</div>            <!-- How To Do It -->";s:4:"code";N;s:5:"title";s:18:"Pusher Integration";s:3:"url";s:19:"/pusher-integration";s:6:"layout";s:25:"laravel5-2TutorialsLayout";s:11:"description";s:18:"Pusher Integration";s:9:"is_hidden";s:1:"0";}}