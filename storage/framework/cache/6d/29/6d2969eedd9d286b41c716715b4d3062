1486167664a:1:{s:32:"laravel5.2/databaseMigration.htm";a:10:{s:8:"fileName";s:32:"laravel5.2/databaseMigration.htm";s:7:"content";s:5371:"title = "Database Migration"
url = "/database-migration"
layout = "laravel5-2TutorialsLayout"
description = "Laravel Feature: Database Migration"
is_hidden = 0
==
<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> Database Migrations</h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      Laravel database migrations provide an easy way to define your database table structure and modifications using fluent and expressive PHP code.  
      Instead of telling your team members to manually add columns to their local copy of the database, 
      your teammates can simply run the migrations you push into source control.
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      I don't personally prefer this because this does not practice my MySQL programming skills.
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      Everytime you create a table, or modify its columns or add constraints and other table based operation.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ol>
        <li>
          In the terminal, in the root directory of the project: <span class="icon-terminal"></span>
          <code> php artisan make:migration create_tasks_table --create=tasks </code>
          <div class="well">
            <code>
            vagrant@homestead:~/Code/octobercms$ php artisan help make:migration <br>
            Usage: <br>
              make:migration [options] [--] <name> <br>
            <br>
            Arguments: <br>
              name                   The name of the migration. <br>
            
            Options: <br>
                  --create[=CREATE]  The table to be created. <br>
                  --table[=TABLE]    The table to migrate. <br>
                  --path[=PATH]      The location where the migration file should be created. <br>
              -h, --help             Display this help message <br>
              -q, --quiet            Do not output any message <br>
              -V, --version          Display this application version <br>
                  --ansi             Force ANSI output <br>
                  --no-ansi          Disable ANSI output <br>
              -n, --no-interaction   Do not ask any interactive question <br>
                  --env[=ENV]        The environment the command should run under. <br>
              -v|vv|vvv, --verbose   Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug <br>
            <br>
            Help: <br>
              Create a new migration file <br>
            </code>
          </div>
        </li>
        
        <li>
          It will generate a file named <code>2017_02_17_043744_create_tasks_table.php</code> (autogenerated filename) located at ProjectRootDirectory/database/migrations
        </li>

        <li>
          Configure the logic inside the <code>up()</code> method.
          <pre>
              <code>
                  &lt;?php
                  use Illuminate\Database\Schema\BluePrint;
                  use Illuminate\Database\Migrations\Migration;
                  
                  class CreateTasksTable extends Migration
                  {
                    //Rune the migrations
                    public function up()
                    {
                        Schema::create( 'tasks', function(Blueprint $table)
                                                 {
                                                   $table->increments('id');
                                                   $table->string('name');
                                                   $table->timestamp();
                                                 }
                                      );
                    }
                    
                    //Reverse the migrations
                    public function down()
                    {
                        Schema::drop('tasks');
                    }
                  }
                  ?&gt;
              </code>
          </pre>
        </li>
        
        <li>
          Step 4: In the terminal, in the root directory of the project: <span class="icon-terminal"></span> <code> php artisan migrate </code>
        </li>
      </ol>
    </p>
  </div>
</div>            <!-- How To Do It -->";s:5:"mtime";i:1486090483;s:6:"markup";s:5208:"<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> Database Migrations</h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      Laravel database migrations provide an easy way to define your database table structure and modifications using fluent and expressive PHP code.  
      Instead of telling your team members to manually add columns to their local copy of the database, 
      your teammates can simply run the migrations you push into source control.
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      I don't personally prefer this because this does not practice my MySQL programming skills.
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      Everytime you create a table, or modify its columns or add constraints and other table based operation.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ol>
        <li>
          In the terminal, in the root directory of the project: <span class="icon-terminal"></span>
          <code> php artisan make:migration create_tasks_table --create=tasks </code>
          <div class="well">
            <code>
            vagrant@homestead:~/Code/octobercms$ php artisan help make:migration <br>
            Usage: <br>
              make:migration [options] [--] <name> <br>
            <br>
            Arguments: <br>
              name                   The name of the migration. <br>
            
            Options: <br>
                  --create[=CREATE]  The table to be created. <br>
                  --table[=TABLE]    The table to migrate. <br>
                  --path[=PATH]      The location where the migration file should be created. <br>
              -h, --help             Display this help message <br>
              -q, --quiet            Do not output any message <br>
              -V, --version          Display this application version <br>
                  --ansi             Force ANSI output <br>
                  --no-ansi          Disable ANSI output <br>
              -n, --no-interaction   Do not ask any interactive question <br>
                  --env[=ENV]        The environment the command should run under. <br>
              -v|vv|vvv, --verbose   Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug <br>
            <br>
            Help: <br>
              Create a new migration file <br>
            </code>
          </div>
        </li>
        
        <li>
          It will generate a file named <code>2017_02_17_043744_create_tasks_table.php</code> (autogenerated filename) located at ProjectRootDirectory/database/migrations
        </li>

        <li>
          Configure the logic inside the <code>up()</code> method.
          <pre>
              <code>
                  &lt;?php
                  use Illuminate\Database\Schema\BluePrint;
                  use Illuminate\Database\Migrations\Migration;
                  
                  class CreateTasksTable extends Migration
                  {
                    //Rune the migrations
                    public function up()
                    {
                        Schema::create( 'tasks', function(Blueprint $table)
                                                 {
                                                   $table->increments('id');
                                                   $table->string('name');
                                                   $table->timestamp();
                                                 }
                                      );
                    }
                    
                    //Reverse the migrations
                    public function down()
                    {
                        Schema::drop('tasks');
                    }
                  }
                  ?&gt;
              </code>
          </pre>
        </li>
        
        <li>
          Step 4: In the terminal, in the root directory of the project: <span class="icon-terminal"></span> <code> php artisan migrate </code>
        </li>
      </ol>
    </p>
  </div>
</div>            <!-- How To Do It -->";s:4:"code";N;s:5:"title";s:18:"Database Migration";s:3:"url";s:19:"/database-migration";s:6:"layout";s:25:"laravel5-2TutorialsLayout";s:11:"description";s:35:"Laravel Feature: Database Migration";s:9:"is_hidden";s:1:"0";}}