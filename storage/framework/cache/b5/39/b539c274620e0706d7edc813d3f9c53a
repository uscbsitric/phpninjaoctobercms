1490241745a:1:{s:30:"laravel5.2/registryPattern.htm";a:9:{s:8:"fileName";s:30:"laravel5.2/registryPattern.htm";s:7:"content";s:7868:"title = "Registry Pattern"
url = "/registry-pattern"
layout = "laravel5-2TutorialsLayout"
is_hidden = 0
==
<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> Registry Pattern </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      Manages the registration and resolution of registered classes, at runt-time and can be user input dependent.
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      None
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      When you want dynamic resolution of concrete classes given an interface at runtime.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ol>
        <li>
          Make a base interface.  In <code>RootProjectDirectory\App\MyInterfaces</code>
          
          <pre>
            <code>
            &lt;?php
            namespace App\MyInterfaces;

            interface PaymentGateway
            &#123;
	          function pay();
            &#125;
            </code>
          </pre>
        </li>

        <li>
          Make 2 <code>concrete classes</code>

          <pre>
            <code>
                &lt;?php
                namespace App\MyConcreteClasses;

                use App\MyInterfaces\PaymentGateway;

                class PaypalPaymentGateway implements PaymentGateway
                &#123;
	              protected $apiKey;
	
	              public function __construct($apiKey)
	              &#123;
		            $this->apiKey = $apiKey;
	              &#125;
	
	              public function pay()
	              &#123;
		            echo 'this is the pay function of PayPalPaymentGateway';
		            exit();
	              &#125;
                &#125;
                
                ===============================================================
                
                &lt;?php
                namespace App\MyConcreteClasses;

                use App\MyInterfaces\PaymentGateway;

                class SomeOtherPaymentGateway implements PaymentGateway
                &#123;
	              protected $apiKey;
	
	              public function __construct($apiKey)
	              &#123;
		            $this->apiKey = $apiKey;
	              &#125;

	              public function pay()
	              &#123;
		            echo 'this is the pay function of SomeOtherPaymentGateway';
		            exit();
	              &#125;
                &#125;
            </code>
          </pre>
        </li>

        <li>
          Make a <code>Registry Class</code>
          
          <pre>
            <code>
              &lt;?php
              namespace App\MyRegistries;

              use App\MyInterfaces\PaymentGateway;

              class PaymentGatewayRegistry
              &#123;
	            protected $gateways = [];

	            function register($name, PaymentGateway $instance)
	            &#123;
		          $this->gateways[$name] = $instance;

		          return $this;
	            &#125;
	
	            function get($name)
	            &#123;
		          if( array_key_exists($name, $this->gateways) )
		          &#123;
			        return $this->gateways[$name];
		          &#125;
		          else
		          &#123;
			        throw new Exception('Invalid Gateway');
		          &#125;

		          return $this->gateways[$name];
	           &#125;
	
	           function getAll()
	           &#123;
		         return $this->gateways;
	           &#125;
              &#125;
            </code>
          </pre>
        </li>

        <li>
		  Make a <code>Service Provider</code>
		  
		  <pre>
		    <code>
              &lt;?php
              namespace App\Providers;

              use Illuminate\Support\ServiceProvider;
              use App\MyRegistries\PaymentGatewayRegistry;
              use App\MyConcreteClasses\PaypalPaymentGateway;
              use App\MyConcreteClasses\SomeOtherPaymentGateway;

              class PaymentServiceProvider extends ServiceProvider
              &#123;
	            function register()  // binding location
	            &#123;
		          $this->app->singleton( PaymentGatewayRegistry::class );
	            &#125;

	            function boot()  // all other service providers are available
	            &#123;
		          $this->app->make( PaymentGatewayRegistry::class )
		                    ->register('PayPal', new PaypalPaymentGateway('theAPIKey12341'))
		                    ->register('SomeOther', new SomeOtherPaymentGateway('theAPIKey12342'));
	            &#125;
              &#125;
		    </code>
		  </pre>
        </li>
        
        <li>
		  In the <code>Controller</code>...
		  
		  <pre>
		    <code>
		      &lt;?php

                namespace App\Http\Controllers;

                use App\Http\Requests;
                use Illuminate\Http\Request;
                use App\Http\Requests\TaskRequest;
                use App\Http\Controllers\Controller;
                use App\Repositories\TaskRepository;
                use App\MyRegistries\PaymentGatewayRegistry;

                class FrederickController extends Controller
                &#123;
	              protected $gatewayRegistry;

	              public function __construct( PaymentGatewayRegistry $registry )
	              &#123;
		            $this->gatewayRegistry = $registry;
	              &#125;
	
	              function pay(Request $request)
	              &#123;
		            $input = $request['input'];
		            $this->gatewayRegistry->get( $input )->pay();

		            return 'this is the pay function of the FrederickController';
	              &#125;
              &#125;
		    </code>
		  </pre>
        </li>
        
        <li>
		  Register the Service Provider in RootProjectDirectory\config\app.php
		  
		  
		  <pre>
		    <code>
		      /*
               * Application Service Providers...
               */
               App\Providers\AppServiceProvider::class,
               App\Providers\AuthServiceProvider::class,
               App\Providers\EventServiceProvider::class,
               App\Providers\RouteServiceProvider::class,
    	       App\Providers\RocketShipServiceProvider::class,
    	       App\Providers\PaymentServiceProvider::class,  // &#123;--- the PaymentServiceProvider
		    </code>
		  </pre>
        </li>

        <li>
		  Access and check it in the browser, the is the user input based, runtime resolution
		  
		  <pre>
		    <code>
		      http://startingpoint/registryPatternTest?input=SomeOther
		      or
		      http://startingpoint/registryPatternTest?input=PayPal
		    </code>
		  </pre>
        </li>
      </ol>
    </p>
  </div>
</div>            <!-- How To Do It -->";s:5:"mtime";i:1486709917;s:6:"markup";s:7761:"<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> Registry Pattern </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      Manages the registration and resolution of registered classes, at runt-time and can be user input dependent.
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      None
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      When you want dynamic resolution of concrete classes given an interface at runtime.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ol>
        <li>
          Make a base interface.  In <code>RootProjectDirectory\App\MyInterfaces</code>
          
          <pre>
            <code>
            &lt;?php
            namespace App\MyInterfaces;

            interface PaymentGateway
            &#123;
	          function pay();
            &#125;
            </code>
          </pre>
        </li>

        <li>
          Make 2 <code>concrete classes</code>

          <pre>
            <code>
                &lt;?php
                namespace App\MyConcreteClasses;

                use App\MyInterfaces\PaymentGateway;

                class PaypalPaymentGateway implements PaymentGateway
                &#123;
	              protected $apiKey;
	
	              public function __construct($apiKey)
	              &#123;
		            $this->apiKey = $apiKey;
	              &#125;
	
	              public function pay()
	              &#123;
		            echo 'this is the pay function of PayPalPaymentGateway';
		            exit();
	              &#125;
                &#125;
                
                ===============================================================
                
                &lt;?php
                namespace App\MyConcreteClasses;

                use App\MyInterfaces\PaymentGateway;

                class SomeOtherPaymentGateway implements PaymentGateway
                &#123;
	              protected $apiKey;
	
	              public function __construct($apiKey)
	              &#123;
		            $this->apiKey = $apiKey;
	              &#125;

	              public function pay()
	              &#123;
		            echo 'this is the pay function of SomeOtherPaymentGateway';
		            exit();
	              &#125;
                &#125;
            </code>
          </pre>
        </li>

        <li>
          Make a <code>Registry Class</code>
          
          <pre>
            <code>
              &lt;?php
              namespace App\MyRegistries;

              use App\MyInterfaces\PaymentGateway;

              class PaymentGatewayRegistry
              &#123;
	            protected $gateways = [];

	            function register($name, PaymentGateway $instance)
	            &#123;
		          $this->gateways[$name] = $instance;

		          return $this;
	            &#125;
	
	            function get($name)
	            &#123;
		          if( array_key_exists($name, $this->gateways) )
		          &#123;
			        return $this->gateways[$name];
		          &#125;
		          else
		          &#123;
			        throw new Exception('Invalid Gateway');
		          &#125;

		          return $this->gateways[$name];
	           &#125;
	
	           function getAll()
	           &#123;
		         return $this->gateways;
	           &#125;
              &#125;
            </code>
          </pre>
        </li>

        <li>
		  Make a <code>Service Provider</code>
		  
		  <pre>
		    <code>
              &lt;?php
              namespace App\Providers;

              use Illuminate\Support\ServiceProvider;
              use App\MyRegistries\PaymentGatewayRegistry;
              use App\MyConcreteClasses\PaypalPaymentGateway;
              use App\MyConcreteClasses\SomeOtherPaymentGateway;

              class PaymentServiceProvider extends ServiceProvider
              &#123;
	            function register()  // binding location
	            &#123;
		          $this->app->singleton( PaymentGatewayRegistry::class );
	            &#125;

	            function boot()  // all other service providers are available
	            &#123;
		          $this->app->make( PaymentGatewayRegistry::class )
		                    ->register('PayPal', new PaypalPaymentGateway('theAPIKey12341'))
		                    ->register('SomeOther', new SomeOtherPaymentGateway('theAPIKey12342'));
	            &#125;
              &#125;
		    </code>
		  </pre>
        </li>
        
        <li>
		  In the <code>Controller</code>...
		  
		  <pre>
		    <code>
		      &lt;?php

                namespace App\Http\Controllers;

                use App\Http\Requests;
                use Illuminate\Http\Request;
                use App\Http\Requests\TaskRequest;
                use App\Http\Controllers\Controller;
                use App\Repositories\TaskRepository;
                use App\MyRegistries\PaymentGatewayRegistry;

                class FrederickController extends Controller
                &#123;
	              protected $gatewayRegistry;

	              public function __construct( PaymentGatewayRegistry $registry )
	              &#123;
		            $this->gatewayRegistry = $registry;
	              &#125;
	
	              function pay(Request $request)
	              &#123;
		            $input = $request['input'];
		            $this->gatewayRegistry->get( $input )->pay();

		            return 'this is the pay function of the FrederickController';
	              &#125;
              &#125;
		    </code>
		  </pre>
        </li>
        
        <li>
		  Register the Service Provider in RootProjectDirectory\config\app.php
		  
		  
		  <pre>
		    <code>
		      /*
               * Application Service Providers...
               */
               App\Providers\AppServiceProvider::class,
               App\Providers\AuthServiceProvider::class,
               App\Providers\EventServiceProvider::class,
               App\Providers\RouteServiceProvider::class,
    	       App\Providers\RocketShipServiceProvider::class,
    	       App\Providers\PaymentServiceProvider::class,  // &#123;--- the PaymentServiceProvider
		    </code>
		  </pre>
        </li>

        <li>
		  Access and check it in the browser, the is the user input based, runtime resolution
		  
		  <pre>
		    <code>
		      http://startingpoint/registryPatternTest?input=SomeOther
		      or
		      http://startingpoint/registryPatternTest?input=PayPal
		    </code>
		  </pre>
        </li>
      </ol>
    </p>
  </div>
</div>            <!-- How To Do It -->";s:4:"code";N;s:5:"title";s:16:"Registry Pattern";s:3:"url";s:17:"/registry-pattern";s:6:"layout";s:25:"laravel5-2TutorialsLayout";s:9:"is_hidden";s:1:"0";}}