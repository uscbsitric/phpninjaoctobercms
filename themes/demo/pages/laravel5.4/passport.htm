title = "Passport"
url = "/passport"
layout = "laravel5-4TutorialsLayout"
description = "Laravel 5.4 Passport"
is_hidden = 0

[siteSearchInclude]
==
{% component 'siteSearchInclude' %}

<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> Passport</h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      <code>
        This documentation assumes you are already familiar with OAuth2. If you do not know anything about OAuth2, consider familiarizing yourself with the general terminology and features of OAuth2 before continuing.
      </code>
      Provides a full OAuth2 server implementation for your Laravel application. Passport is built on top of the League OAuth2 server that is maintained by Alex Bilbie.
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      <p>
        Im using stock Laravel Homestead Vagrant Box as of April 2017 I think.
      </p>

      References For Passport:
      <p>
        https://alexbilbie.com/guide-to-oauth-2-grants/
        https://blog.shameerc.com/2016/08/set-up-oauth2-server-using-laravel-passport
        http://www.codedodle.com/2016/11/laravel-53-passport-oauth-2-setup-with.html
      </p>
      
      References For OAuth2:
      <p>
        https://alexbilbie.com/guide-to-oauth-2-grants/
        https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2
      </p>
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      When you need to implement an oauth2 server, so other client applications can access its resources securly.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ul>
        <li>
          Step 1: In mac vagrant environment, set chmod to 777, do this outside of vagrant.
        </li>

        <li>
          Step 2: Configure Database credentials in the .env file
        </li>

        <li>
          Step 3: Create an auth scaffold by running: <code>php artisan make:auth</code>
        </li>

        <li>
          Step 4: Install the <code>Passport</code> Package using composer:  <code>composer require laravel/passport</code>
        </li>

        <li>
		  Step 5: Register the Passport Service Provider in the Provider's array
          <pre>
            In the rootProjectDirectory/config/app.php
            <code>
            ...
            'providers' => [

            /*
             * Laravel Framework Service Providers...
             */
             ...
             Laravel\Passport\PassportServiceProvider::class,
            </code>
          </pre>
        </li>

        <li>
          Step 6: Run the database migrations: <code>php artisan migrate</code>
        </li>

        <li>
          Step 7: Run <code>php artisan passport:install</code>, which will create the encryption keys required by the OAuth2 library. It will also create a personal access and password clients for us.
        </li>

        <li>
          Step 8: Modify the User model to use the trait HasApiTokens trait
          <pre>
            In the rootProjectDirectory/app/User.php
            <code>
            ...
            use Laravel\Passport\HasApiTokens;
            ...
            use Notifiable, HasApiTokens;
            </code>
          </pre>
        </li>

        <li>
		  Step 9: Register Passport Routes
		  <pre>
          In the projectRootDirectory/app/providers/AuthServiceProvider.php
          <code>
          ...
          use Laravel\Passport\Passport;
          ...
          public function boot()
          {
            $this->registerPolicies();
            Passport::routes();
          }
          </code>
		  </pre>
        </li>
        <li>
          Step 10: Set the driver for the <code>api</code> guard
          <pre>
            In projectRootDirectory/config/auth.php
            <code>
            ...
            'guards' => ['web' => ['driver' => 'session',
                                   'provider' => 'users',
                                  ],
                         'api' => ['driver' => 'passport',
                                   'provider' => 'users',
                                  ],
                        ],
            ...
            </code>
          </pre>
        </li>

        <li>
          Step 11: Publish the Passport Vue Components
          <pre>
            Run : <strong>php artisan vendor:publish --tag=passport-components</strong>
          </pre>
        </li>

        <li>
          Step 12: Register the Passport Vue Components
          <pre>
            In the rootProjectDirectory/resources/assets/js/app.js
            <code>
              require('./bootstrap');

              window.Vue = require('vue');

              /**
               * Next, we will create a fresh Vue application instance and attach it to
               * the page. Then, you may begin adding components to this application
               * or customize the JavaScript scaffolding to fit your unique needs.
               */

               Vue.component('example', require('./components/Example.vue'));

               Vue.component('passport-clients',
	                         require('./components/passport/Clients.vue')
	                        );

               Vue.component('passport-authorized-clients',
	                          require('./components/passport/AuthorizedClients.vue')
	                        );

               Vue.component('passport-personal-access-tokens',
                              require('./components/passport/PersonalAccessTokens.vue')
                            );

               const app = new Vue({el: '#app'});
            </code>
          </pre>
        </li>

        <li>
		  Step 13: I've had a problem with running <code>npm run dev</code>
          <pre>
            So, I had to do these:
            <code>
              <strong>
                composer install
                npm install
                npm install cross-env -D
                npm run dev
              </strong>
            </code>
            then updated <code>.gitignore</code>, ignoring <code>/node_modules</code>
          </pre>
        </li>
        <li>
          Step 14: Added the passport components to the projectRootDirectory/resources/views/home.blade.php
          <pre>
            <code>
              @extends('layouts.app')

              @section('content')
              &lt;div class="container"&gt;
                &lt;div class="row"&gt;
                  &lt;div class="col-md-8 col-md-offset-2"&gt;
                    &lt;div class="panel panel-default"&gt;
                      &lt;div class="panel-heading"&gt;Dashboard&lt;/div&gt;

                      &lt;div class="panel-body"&gt;
                       You are logged in!
                      &lt;/div&gt;
                     &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
    
              &lt;div class="row"&gt;
                &lt;div class="col-md-8 col-md-offset-2"&gt;
                   &lt;div class="panel panel-default"&gt;
                    &lt;div class="panel-heading"&gt;OAuth2 Operations&lt;/div&gt;

                    &lt;div class="panel-body"&gt;
                      &lt;passport-clients&gt;&lt;/passport-clients&gt;
                      &lt;passport-authorized-clients&gt;&lt;/passport-authorized-clients&gt;
                      &lt;passport-personal-access-tokens&gt;&lt;/passport-personal-access-tokens&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
               &lt;/div&gt;
              &lt;/div&gt;
             &lt;/div&gt;
             @endsection

            </code>
          </pre>
        </li>

        <li>
          Step 15: Added 1 <code>API based route</code> to retrieve user email
          <pre>
            In the rootProjectDirectory/routes/api.php
            <code>
              ...
              Route::get('/user/{user}',
		                 function(App\User $user)
		                 {
	                       return $user->email;
                         }
                        );
            </code>
          </pre>
        </li>

        <li>
          Step 16: Added API route protection
          <pre>
            In the rootProjectDirectory/routes/api.php
            <code>
              ...
              Route::get('/user/{user}',
		                 function(App\User $user)
		                 {
	                       return $user->email;
                         }
                        )->middleware('auth:api'); // this line here
            </code>
          </pre>
        </li>
        
        <li>
          <code>This step is not necessary, this is just for my personal usage, and this is in an oauth2 client</code></br>
          Step 17: Create a Passport enabled client with its Service Providers Registered Client (same steps in creating the OAuth2Server but only up to adding Passport, because the client would need a Guzzle based request)
        </li>
        
        <li>
          <code>This is in an oauth2 client</code></br>
          Step 18: Add two routes with the following logic:
          <pre>
            In the rootProjectDirectory/routes/web.php
            <code>
              ...
              Route::get('/redirect',
              function()
              {
                $query = http_build_query(['client_id' => '3',
                                           'redirect_uri' => 'http://authorizationgrantclient1/callback',
                                           'response_type' => 'code',
                                           'scope' => 'place-orders check-status'
                                          ]
                                         );

               return redirect('http://oauth2server1/oauth/authorize?' . $query);
              }
             );

             Route::get('/callback',
                        function(Illuminate\Http\Request $request)
                        {
                          $http = new \GuzzleHttp\Client;
                          $response = $http->post('http://oauth2server1/oauth/token', 
                                                  ['form_params' => ['client_id' => '3',
                                                                     'client_secret' => 'CBgVDvofCj1ocT13wfT5VEaXY7qLt8r3kfh8l4Xu',
                                                                     'grant_type' => 'authorization_code',
                                                                     'redirect_uri' => 'http://authorizationgrantclient1/callback',
                                                                     'code' => $request->code,
                                                                    ],
                                                  ]
                                                 );

                          return json_decode((string) $response->getBody(), true);
                        }
                       );
            </code>
          </pre>
        </li>

        <li>
          <code>This is in an oauth2 client</code></br>
          Step 19: To test the OAuthServer2
          <pre>
            <code>
              1. Go To http://authorizationgrantclient1/redirect
              2. If not yet logged in to http://oauth2server1 , then log in using oauth2server1 credentials
                 and authorize authorizationgrantclient1
              3. A response with the Access Token that we will need to send to every other request we make.
              
              4.1. In the terminal, run: <strong>curl -H "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI
                   6IjUzYWQ4YWRiYjEyMzc1YjVkMmFmNDM0Y2M5MTAwZWU4OTYxNThhOWNkYjU0MTgy
                   MjViMjNjZTViODk3MjY0NWFmZjJhOGIzOGVmMDYyZjEyIn0.eyJhdWQiOiIzIiwianRpIjoiNTNhZDhhZGJiMTIzNzViNWQyYWY0MzRj
                   YzkxMDBlZTg5NjE1OGE5Y2RiNTQxODIyNWIyM2NlNWI4OTcyNjQ1YWZmMmE4YjM4ZWYwNjJmMTIiLCJpYXQiOjE0OTgxODU5ODMsIm5i
                   ZiI6MTQ5ODE4NTk4MywiZXhwIjoxNTI5NzIxOTgzLCJzdWIiOiIxIiwic2NvcGVzIjpbXX0.EhjVmA3clQCEnLT02aDaVj4zV3Qw9z6j
                   dOOt8woVyiSwdtkbOg2BRbB-iXyZOihbgCPxr0jJCQDNLCZGX4HOoZKgJGtUxnRo5FpNmdaX5RL-0tQxSl8x5Gq3EQyb1TXReHLNOiTJ
                   IqGGzDMS7ZVm1lfOJ6fD3XWvdND7SfYuHRbcfkZNKqgVnEK47CsrEwnSzErLHdm9Wh5-hpBq5jlfHL88yK43YDAQXp_Py9a696fU_MV5
                   w_6HDpc6bbYvsr3LIf2DaQLXjR9uhHajM2StkdOkN2ILgwOaW8JT6-ptDb_4QRJUjQq2hGdgJp_0YIptPSTtsgo65NemTlssxVKkUOJr
                   n1CCsD9N31ARxUkbdq1IYa-bkd7oS8Hy5VQirBKXkLoJgOcsLnhHLjydyQnk5X5EpE7YJClIBH7VounZhzN6nqGoWQx8ejgMkCHxzF9f
                   QyZEF3id2WYSZKoaizF0OdRHWnNIh2BLaVJ0Th2SsdU77ZMrwXEpZ0jojzKVWN68x5n6N-Eabnzvd17AYy7RIGFxf8Pi6TPez2K-uruz
                   -RsDV1vYWv7XgsDqkYk63zZl0tPinlCZwvYm6qYl5U6O5ExRvUIZUIvTqd2efUmS1KmlxdP_tfjmhX6rfTqGAOQkgp8O-1MX_bICgs0X
                   uA3YQOaWMl9KvZd2flFzTDBf8SY" http://oauth2server1/api/user/1</strong>
              4.2. In Insomnia do the following: 
                   Make a GET request, set the address to http://oauth2server1/api/user/1
                   Set the Header to: Authorization
                   Its value to: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI
                   6IjUzYWQ4YWRiYjEyMzc1YjVkMmFmNDM0Y2M5MTAwZWU4OTYxNThhOWNkYjU0MTgy
                   MjViMjNjZTViODk3MjY0NWFmZjJhOGIzOGVmMDYyZjEyIn0.eyJhdWQiOiIzIiwianRpIjoiNTNhZDhhZGJiMTIzNzViNWQyYWY0MzRj
                   YzkxMDBlZTg5NjE1OGE5Y2RiNTQxODIyNWIyM2NlNWI4OTcyNjQ1YWZmMmE4YjM4ZWYwNjJmMTIiLCJpYXQiOjE0OTgxODU5ODMsIm5i
                   ZiI6MTQ5ODE4NTk4MywiZXhwIjoxNTI5NzIxOTgzLCJzdWIiOiIxIiwic2NvcGVzIjpbXX0.EhjVmA3clQCEnLT02aDaVj4zV3Qw9z6j
                   dOOt8woVyiSwdtkbOg2BRbB-iXyZOihbgCPxr0jJCQDNLCZGX4HOoZKgJGtUxnRo5FpNmdaX5RL-0tQxSl8x5Gq3EQyb1TXReHLNOiTJ
                   IqGGzDMS7ZVm1lfOJ6fD3XWvdND7SfYuHRbcfkZNKqgVnEK47CsrEwnSzErLHdm9Wh5-hpBq5jlfHL88yK43YDAQXp_Py9a696fU_MV5
                   w_6HDpc6bbYvsr3LIf2DaQLXjR9uhHajM2StkdOkN2ILgwOaW8JT6-ptDb_4QRJUjQq2hGdgJp_0YIptPSTtsgo65NemTlssxVKkUOJr
                   n1CCsD9N31ARxUkbdq1IYa-bkd7oS8Hy5VQirBKXkLoJgOcsLnhHLjydyQnk5X5EpE7YJClIBH7VounZhzN6nqGoWQx8ejgMkCHxzF9f
                   QyZEF3id2WYSZKoaizF0OdRHWnNIh2BLaVJ0Th2SsdU77ZMrwXEpZ0jojzKVWN68x5n6N-Eabnzvd17AYy7RIGFxf8Pi6TPez2K-uruz
                   -RsDV1vYWv7XgsDqkYk63zZl0tPinlCZwvYm6qYl5U6O5ExRvUIZUIvTqd2efUmS1KmlxdP_tfjmhX6rfTqGAOQkgp8O-1MX_bICgs0X
                   uA3YQOaWMl9KvZd2flFzTDBf8SY
            </code>
          </pre>
        </li>
      </ul>
    </p>
  </div>
</div>            <!-- How To Do It -->


<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> Passport -> Password Grant Token </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      The OAuth2 password grant allows your other first-party clients, such as a mobile application, to obtain an access token using an e-mail address / username and password. 
      This allows you to issue access tokens securely to your first-party clients without requiring your users to go through the entire OAuth2 authorization code redirect flow.
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      Check if the <code>client</code>'s <code>password_client</code> flag is set to <code>1</code> in the <code>oauth_clients</code> table
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      When the clients that will access the <code>Resource Server</code> are <code>first-party</code> in nature, a.k.a other applications that is developed by the same owner of
      the <code>Resource Server</code>.  These clients can be mobile applications (Android and IOS).
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ul>
        <li>
		  Step 1: 
          <pre>
            For a new Password Grant Client
            In the terminal in the rootProjectDirectory, run <strong>php artisan passport:client --password</strong>
            Follow the on-screen instructions
          </pre>
        </li>

        <li>
		  Step 2: 
          <pre>
            Issue a <strong>POST</strong> request to the <strong>/oauth/token</strong> route of the <strong>Resource Server</strong> along with the <strong>user's</strong> email address and password.
            If the request is successful, you will receive an <strong>access_token</strong> and <strong>refresh_token</strong> in the JSON response from the server
            <code>
                In authorizationgrantclient1\routes\web.php
                ...
                ///////////// PASSWORD GRANT TOKEN /////////////
                
                Route::get('/passwordTokenGrantTest',
                    	   function()
                           {
                             $http = new GuzzleHttp\Client;

                             $response = $http->post('http://oauth2server1/oauth/token',
                                                     ['form_params' => ['grant_type' => 'password',
                                                                        'client_id' => '3',
                                                                        'client_secret' => 'WYveOsogWzD3t4RehAPctuL1EWL4uZzpiM51XAN9',
                                                                        'username' => 'user1@somewhere.com',
                                                                        'password' => 'user1',
                                                                        'scope' => 'place-orders check-status',
                                                                       ],
                                                     ]
                                                    );
                             return json_decode((string) $response->getBody(), true);
                           }
                          );
                
                ///////////// PASSWORD GRANT TOKEN /////////////
            </code>
          </pre>
        </li>

      </ul>
    </p>
  </div>
</div>            <!-- How To Do It -->


<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> <code>THIS IS NOT WORKING : FORGET ABOUT THIS</code> Passport -> Implicit Grant Tokens </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      The implicit grant is similar to the authorization code grant; however, the token is returned to the client without exchanging an authorization code. 
      This grant is most commonly used for JavaScript or mobile applications where the client credentials can't be securely stored.
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      <code>THIS IS NOT WORKING : FORGET ABOUT THIS</code>
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      This grant is most commonly used for JavaScript or mobile applications where the client credentials can't be securely stored.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ul>
        <li>
		  Step 1: call the <code>enableImplicitGrant</code> method in your AuthServiceProvider:
          <pre>
            In rootProjectDirectory/app/Providers/AuthServiceProvider.php
            <code>
              public function boot()
              {
                $this->registerPolicies();
                Passport::routes();
                Passport::enableImplicitGrant();
              }
            </code>
          </pre>
        </li>

        <li>
		  Step 2: in authorizationgrantclient1\routes\web.php
          <pre>
            <code>
              Route::get('/implicitGrantRedirect',
                         function()
                         {
                           $query = http_build_query(['client_id' => '5',
                                                      'redirect_uri' => 'http://authorizationgrantclient1/implicitGrantRedirectCallback',
                                                      'response_type' => 'token',
                                                      'scope' => 'place-orders check-status',
                                                     ]
                                                    );

                           $redirectTo = 'http://oauth2server1/oauth/authorize?'.$query;
                           dd($redirectTo);

                           return redirect($redirectTo);
                         }
                        );
            </code>
          </pre>
        </li>

      </ul>
    </p>
  </div>
</div>            <!-- How To Do It -->


<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> Passport -> Client Credentials Grant Tokens </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      The client credentials grant is suitable for machine-to-machine authentication.
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      <p>
        I could not get <code>Guzzle</code> to work on this so, I resorted to <code>cURL</code> instead.  
        Extra work needs to be done in the oauth2 resource server first, because the documentation on 5.4 does not say anything about it, and as a result
        the token generated by the <code>Client Credentials Grant Token</code> is invalid.
      </p>
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
       You might use this grant in a scheduled job which is performing maintenance tasks over an API.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ul>
        <li>
		  Step 1: In oauth2ResourceServer\app\Providers\RouteServiceProvider.php
          <pre>
            <code>
            ...
            public function map()
            {
              $this->mapApiRoutes();
              $this->mapWebRoutes();
              //
              $this->mapClientCredentialsRoutes();  // &lt;-- function to map and define Client Credentials Grant based requests
            }
            ...
            protected function mapClientCredentialsRoutes()
            {
               Route::prefix('cc')->middleware('client_credentials')
                                  ->namespace($this->namespace)
                                  ->group( base_path('routes/client_credentials.php') );
            }
            </code>
          </pre>
        </li>

        <li>
		  Step 2: In oauth2ResourceServer\app\Http\Kernel.php
          <pre>
            <code>
             protected $routeMiddleware = [...,
                'client_credentials' => \Laravel\Passport\Http\Middleware\CheckClientCredentials::class  &lt;-- add this middleware
             ];
            </code>
          </pre>
        </li>
        
        <li>
		  Step 3: In <code>oauth2ResourceServer\routes\client_credentials.php</code>, this is the test route for client credentials grant token
          <pre>
            <code>
            &lt;?php

            use Illuminate\Http\Request;

            Route::get('/clientCredentials/{userID}',
            function(Request $request )
            {
             $id = $request->clientCredentials;
             $user = App\User::find(1)->first();

             return response()->json(['id' => $user->id,
                                      'email' => $user->email,
                                      'name' => $user->name,
                                     ]);
            })->middleware(['client_credentials:check-status,place-orders']);
            </code>
          </pre>
        </li>

        <li>
		  Step 4: In <code>oauth2Client\routes\web.php</code>, make the token request
          <pre>
            <code>
             ...
             Route::get('/clientCredentialsGrantTest',
                        function()
                        {
                          $guzzle = new GuzzleHttp\Client;

                          $response = $guzzle->post('http://oauth2server1/oauth/token',
                                                    ['form_params' => ['grant_type' => 'client_credentials',
                                                                       'client_id' => '3',
                                                                       'client_secret' => 'ogZbdI6qLQfuN80BiH1XEVQSzRuOHpwkYoKUqUKc',
                                                                       'scope' => 'place-orders check-status',
                                                                      ],
                                                    ]
                                                   );

                          return json_decode((string) $response->getBody(), true);
                         }
                        );
            </code>
          </pre>
        </li>

        <li>
          Step 5: In <code>oauth2Client\routes\web.php</code>, make request with the token generated previously
          <pre>
            <code>
            Route::get('/clientCredentialsGrantMachineTest',
            function()
            {
             $header = ['Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImQ1MWQyMTM3M2QzMmRiYmMxOWM1OTE5M2ZhMmJiNjAyNjAyOGI3ODYzM2I4NjYwNDM5ZGY3ZmE2YzljZmVjMDU2MWRkOWMzYzJhYjM1ZTM4In0.eyJhdWQiOiIzIiwianRpIjoiZDUxZDIxMzczZDMyZGJiYzE5YzU5MTkzZmEyYmI2MDI2MDI4Yjc4NjMzYjg2NjA0MzlkZjdmYTZjOWNmZWMwNTYxZGQ5YzNjMmFiMzVlMzgiLCJpYXQiOjE1MDA0NDA1NzAsIm5iZiI6MTUwMDQ0MDU3MCwiZXhwIjoxNTMxOTc2NTcwLCJzdWIiOiIiLCJzY29wZXMiOlsicGxhY2Utb3JkZXJzIiwiY2hlY2stc3RhdHVzIl19.PX0j0G2qRUh7fU9JTlbuRUYGqLuhiM6tLYZsAuCurJwOifZNkTY1y4GoWrZDsJJUKMiZcSozaSEKAw02QIO4DvOgScna-ozzpmtx1ZxFXaCzHQRAAwyskxr4CpxBMsM4kHiyUmAM4UlYGkkHDmp-_8rRLXp17qIAVLQGLefzdds3FNMoiObs3t4XwrFdkYjaAu9lZ89if9KVm4kddgv2JNTPI5bdH5-aqhJUF2T1mi5FfJchi4HlXtxd06nC8_4DAZDNbJ1esmW3IPM2JVTtAjZIYg6CDT5tcdfunJ66Fjp22YqtM7UtCfjP2hFXYV84C-GsVsgIFgPBw01OHv0V-P-jWnv3ov8vOPG3UMFUKVQb7GhDtouQtl2S2_oU4fY1Pa6DIZ3a8V7_imPHD4bjct-WK86WbTdGdUOHH2JbbJLWoY8nQO5k0ggRgI6W9XGEe4UIFtjcIHfkQRHmoNDdQMSsT73pkk03affHbcLWMbWklAJmCEyvx_w5Do-fMRy_ZMjqiZduoKGSkmfpLPFe9DblTJMGA3fUpkj1MmttG7Sz17yh2GkpaOR1H8ubwZmH76Y3yguMNnqRy-CezSWAHBmDENEmSkxE_W5UNyD_9tFzO1oicn3WqCepkFsYy1oVjOongWQvWIe5ltURE53vnGgx6rOun1uOiKkvuut6LwE'];

             $ch = curl_init ();
             curl_setopt ($ch, CURLOPT_URL, 'http://oauth2server1/cc/clientCredentials/1');
             curl_setopt ($ch, CURLOPT_HTTPHEADER, $header);
             $result = curl_exec ($ch);
             curl_close($ch);

             return json_decode( (string)$result, true );
           }
          );
            </code>
          </pre>
        </li>

      </ul>
    </p>
  </div>
</div>            <!-- How To Do It -->


<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> Passport -> Personal Access Tokens </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      Sometimes, your users may want to issue access tokens to themselves without going through the typical authorization code redirect flow. 
      Allowing users to issue tokens to themselves via your application's UI can be useful for allowing users to experiment with your API or may serve as a simpler approach to issuing access tokens in general.
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      None
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      Users to issue tokens to themselves without going through the typical authorization code redirect flow.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ul>
        <li>
		  Step 1: Generate a Personal Access Token(scoped or not) at the OAuth2 Resource Server for the authenticated user.
        </li>

        <li>
		  Step 2: Save the generated Personal Access Token somewhere safe. Use that token for every request you make.
        </li>
      </ul>
    </p>
  </div>
</div>            <!-- How To Do It -->


<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> Passport -> Protecting Routes </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      Validates access tokens on incoming requests.
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      None
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      When you want to proctect certain routes by requiring the incoming requests to have a valid token.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ul>
        <li>
		  Step 1: In any route, specify the <code>auth:api</code>, example:
		  <pre>
           Route::get('/user/{user}',
                      function(App\User $user)
                      {
                        $id = $user->id;
	                    $name = $user->name;
	                    $email = $user->email;

	                    return response()->json(['id' => $id,
                                                 'name' => $name,
                                                 'email' => $email
                                                ]);
                      }
                     )->middleware(['auth:api','scopes:check-status,place-orders']);  // both these notations for middleware works
          </pre>
        </li>
      </ul>
    </p>
  </div>
</div>            <!-- How To Do It -->


<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> Passport -> Token Scopes </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      Scopes allow your API clients to request a specific set of permissions when requesting authorization to access an account. 
      For example, if you are building an e-commerce application, not all API consumers will need the ability to place orders. 
      Instead, you may allow the consumers to only request authorization to access order shipment statuses.
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      None
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      In other words, scopes allow your application's users to limit the actions a third-party application can perform on their behalf.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ul>
        <li>
		  Step 1: Define the API's <code>scopes</code> in oauth2server1\app\Providers\AuthServiceProvider.php
          <pre>
            <code>
            ...
            public function boot()
            {
              ...
              // scopes definition
              Passport::tokensCan(['place-orders' => 'Place orders',
                                   'check-status' => 'Check order status',
                                  ]);
            }
            </code>
          </pre>
        </li>

        <li>
		  Step 2: Assign Scopes to Tokens
          <pre>
            When requesting an access token using the Authorization Code Grant, Password Grant and Client Credentials Grant (also applicable to Implicit Grant, but I'm no longer able to make this work),
            consumers should specify their desired scopes as the <strong>scope</strong> query string parameter.  The <code>scope</code> parameter should be a space-delimited list of scopes.
            <code>
              // in <strong>Authorization Code Grant</strong>
              Route::get('/redirect',
                         function()
                         {
                           $query = http_build_query(['client_id'     => '3',
                                                      'redirect_uri'  => 'http://authorizationgrantclient1/callback',
                                                      'response_type' => 'code',
                                                      'scope' => 'check-status place-orders',
                                                     ]
                                                    );

                           $redirectTo = 'http://oauth2server1/oauth/authorize?' . $query;

                           return redirect( $redirectTo );
                         }
                        );


              // in <strong>Password Grant</strong>
              Route::get('/passwordTokenGrantTest',
                         function()
                         {
                           $http = new GuzzleHttp\Client;

                           $response = $http->post('http://oauth2server1/oauth/token',
                                                   ['form_params' => ['grant_type' => 'password',
                                                                      'client_id' => '2',
                                                                      'client_secret' => 'UJrd2yWnIAOGHqWeUiLJPDuBLSgXBHMWmQPwxToI',
                                                                      'username' => 'user1@somewhere.com',
                                                                      'password' => 'user1',
                                                                      'scope' => 'check-status place-orders',
                                                                     ],
                                                   ]
                                                  );

                           return json_decode((string) $response->getBody(), true);
                         }
                        );

              // in <strong>Client Credentials Grant</strong>
              Route::get('/clientCredentialsGrantTest',
                         function()
                         {
                           $guzzle = new GuzzleHttp\Client;

                           $response = $guzzle->post('http://oauth2server1/oauth/token',
                                                     ['form_params' => ['grant_type' => 'client_credentials',
                                                                        'client_id' => '3',
                                                                        'client_secret' => 'ogZbdI6qLQfuN80BiH1XEVQSzRuOHpwkYoKUqUKc',
                                                                        'scope' => 'place-orders check-status',
                                                                       ],
                                                     ]
                                                    );

                           return json_decode((string) $response->getBody(), true);
                          }
                         );

            </code>
          </pre>
        </li>

      </ul>
    </p>
  </div>
</div>            <!-- How To Do It -->


<div class="row"> <!-- Laravel Feature -->
  <div class="green4 tutorialPages">
    <h1 class="fontColorWhite1 noMargin">Laravel Feature</h1>
    <h3 class="fontColorGrey3 noMargin"> <span class="icon-tasks icon-2x"></span> Passport -> Events </h3>
  </div>
</div>            <!-- Laravel Feature -->

<div class="row"> <!-- What Does It Do -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">What Does It Do</h1>
    <p class="fontColorWhite2 noMargin">
      Passport raises events when issuing access tokens and refresh tokens.  You may use these events to prune or revoke other access tokens in your database.
    </p>
  </div>
</div>            <!-- What Does It Do -->

<div class="row"> <!-- Note -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">NOTE: <span class="icon-warning-sign icon-1x"></span></h1>
    <div class="well">
      I'm not interested in this right now.
    </div>
  </div>
</div>            <!-- Note -->

<div class="row"> <!-- When To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">When To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      When you want to prune or revoke access tokens in the database, other than what the documentation says, I cant't figure out when to use this.
    </p>
  </div>
</div>            <!-- When To Do It -->

<div class="row"> <!-- How To Do It -->
  <div class="grey2 tutorialPages withBorderBottom">
    <h1 class="noMargin fontColorGreen3">How To Do It</h1>
    <p class="fontColorWhite2 noMargin">
      <ul>
        <li>
		  Refer to the 5.4 documentation later on
		  <!--
          <pre>
            <strong>sample strong</strong>
            <code>sample code</code>
          </pre>
          -->
        </li>

      </ul>
    </p>
  </div>
</div>            <!-- How To Do It -->